
GYROSCOPE_TEST_IN_OFFICE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800692c  0800692c  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800692c  0800692c  0000792c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006934  08006934  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006934  08006934  00007934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006938  08006938  00007938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800693c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  20000068  080069a4  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  080069a4  00008928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bfe  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304e  00000000  00000000  0001fc96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00022ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001153  00000000  00000000  00024348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028da6  00000000  00000000  0002549b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b01  00000000  00000000  0004e241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f55ad  00000000  00000000  00067d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d2ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000677c  00000000  00000000  0015d334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00163ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067d0 	.word	0x080067d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080067d0 	.word	0x080067d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <LSM6DSL_WriteReg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to write to LSM6DSL register
HAL_StatusTypeDef LSM6DSL_WriteReg(uint8_t reg, uint8_t value) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af04      	add	r7, sp, #16
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_I2C_ADDR, reg, 1, &value, 1, 1000);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b4:	9302      	str	r3, [sp, #8]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	21d4      	movs	r1, #212	@ 0xd4
 80005c2:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <LSM6DSL_WriteReg+0x38>)
 80005c4:	f001 fdb8 	bl	8002138 <HAL_I2C_Mem_Write>
 80005c8:	4603      	mov	r3, r0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000bc 	.word	0x200000bc

080005d8 <LSM6DSL_ReadReg>:

// Function to read from LSM6DSL register
HAL_StatusTypeDef LSM6DSL_ReadReg(uint8_t reg, uint8_t *data) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af04      	add	r7, sp, #16
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_I2C_ADDR, reg, 1, data, 1, 1000);
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ec:	9302      	str	r3, [sp, #8]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	21d4      	movs	r1, #212	@ 0xd4
 80005fa:	4804      	ldr	r0, [pc, #16]	@ (800060c <LSM6DSL_ReadReg+0x34>)
 80005fc:	f001 feb0 	bl	8002360 <HAL_I2C_Mem_Read>
 8000600:	4603      	mov	r3, r0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000bc 	.word	0x200000bc

08000610 <LSM6DSL_ReadRegs>:

// Function to read multiple registers
HAL_StatusTypeDef LSM6DSL_ReadRegs(uint8_t reg, uint8_t *data, uint8_t length) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af04      	add	r7, sp, #16
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_I2C_ADDR, reg, 1, data, length, 1000);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	b29a      	uxth	r2, r3
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	b29b      	uxth	r3, r3
 8000628:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800062c:	9102      	str	r1, [sp, #8]
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	21d4      	movs	r1, #212	@ 0xd4
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <LSM6DSL_ReadRegs+0x38>)
 800063a:	f001 fe91 	bl	8002360 <HAL_I2C_Mem_Read>
 800063e:	4603      	mov	r3, r0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000bc 	.word	0x200000bc

0800064c <LSM6DSL_Init>:

// Initialize gyroscope
HAL_StatusTypeDef LSM6DSL_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
    uint8_t who_am_i;

    // Read WHO_AM_I register
    if (LSM6DSL_ReadReg(LSM6DSL_WHO_AM_I, &who_am_i) != HAL_OK) {
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	4619      	mov	r1, r3
 8000656:	200f      	movs	r0, #15
 8000658:	f7ff ffbe 	bl	80005d8 <LSM6DSL_ReadReg>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <LSM6DSL_Init+0x1a>
        return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e00e      	b.n	8000684 <LSM6DSL_Init+0x38>
    }

    // Check if device is present (should return 0x6A)
    if (who_am_i != 0x6A) {
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b6a      	cmp	r3, #106	@ 0x6a
 800066a:	d001      	beq.n	8000670 <LSM6DSL_Init+0x24>
        return HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	e009      	b.n	8000684 <LSM6DSL_Init+0x38>
    }

    // Configure gyroscope: 208 Hz, 2000 dps
    if (LSM6DSL_WriteReg(LSM6DSL_CTRL2_G, 0x5C) != HAL_OK) {
 8000670:	215c      	movs	r1, #92	@ 0x5c
 8000672:	2011      	movs	r0, #17
 8000674:	f7ff ff92 	bl	800059c <LSM6DSL_WriteReg>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <LSM6DSL_Init+0x36>
        return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LSM6DSL_Init+0x38>
    }

    return HAL_OK;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <LSM6DSL_ReadGyro>:

// Read gyroscope data
HAL_StatusTypeDef LSM6DSL_ReadGyro(int16_t *gyro_x, int16_t *gyro_y, int16_t *gyro_z) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
    uint8_t data[6];

    // Read all 6 bytes at once
    if (LSM6DSL_ReadRegs(LSM6DSL_OUTX_L_G, data, 6) != HAL_OK) {
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	2206      	movs	r2, #6
 800069e:	4619      	mov	r1, r3
 80006a0:	2022      	movs	r0, #34	@ 0x22
 80006a2:	f7ff ffb5 	bl	8000610 <LSM6DSL_ReadRegs>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <LSM6DSL_ReadGyro+0x24>
        return HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	e01e      	b.n	80006ee <LSM6DSL_ReadGyro+0x62>
    }

    // Combine high and low bytes
    *gyro_x = (int16_t)((data[1] << 8) | data[0]);
 80006b0:	7c7b      	ldrb	r3, [r7, #17]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	7c3b      	ldrb	r3, [r7, #16]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21a      	sxth	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	801a      	strh	r2, [r3, #0]
    *gyro_y = (int16_t)((data[3] << 8) | data[2]);
 80006c4:	7cfb      	ldrb	r3, [r7, #19]
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	7cbb      	ldrb	r3, [r7, #18]
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	801a      	strh	r2, [r3, #0]
    *gyro_z = (int16_t)((data[5] << 8) | data[4]);
 80006d8:	7d7b      	ldrb	r3, [r7, #21]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	b21a      	sxth	r2, r3
 80006e0:	7d3b      	ldrb	r3, [r7, #20]
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <LSM6DSL_ConvertGyro>:

// Convert raw data to degrees per second
float LSM6DSL_ConvertGyro(int16_t raw_value) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	80fb      	strh	r3, [r7, #6]
    // For 2000 dps range: 70 mdps/LSB
    return (float)raw_value * 0.070f;
 8000702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800070e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000724 <LSM6DSL_ConvertGyro+0x2c>
 8000712:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000716:	eeb0 0a67 	vmov.f32	s0, s15
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	3d8f5c29 	.word	0x3d8f5c29

08000728 <_write>:

// Printf redirection for UART
int _write(int file, char *ptr, int len) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 1000);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b29a      	uxth	r2, r3
 8000738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	4804      	ldr	r0, [pc, #16]	@ (8000750 <_write+0x28>)
 8000740:	f004 f8b1 	bl	80048a6 <HAL_UART_Transmit>
    return len;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200001b8 	.word	0x200001b8

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 ffb6 	bl	80016ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f86b 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 fa35 	bl	8000bd0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000766:	f000 f8c9 	bl	80008fc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800076a:	f000 f8ff 	bl	800096c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800076e:	f000 f93d 	bl	80009ec <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000772:	f000 f961 	bl	8000a38 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000776:	f000 f99d 	bl	8000ab4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800077a:	f000 f9cb 	bl	8000b14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800077e:	f000 f9f9 	bl	8000b74 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  // Initialize gyroscope
  printf("Initializing LSM6DSL gyroscope...\r\n");
 8000782:	4828      	ldr	r0, [pc, #160]	@ (8000824 <main+0xd0>)
 8000784:	f005 f9c2 	bl	8005b0c <puts>

  if (LSM6DSL_Init() == HAL_OK) {
 8000788:	f7ff ff60 	bl	800064c <LSM6DSL_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <main+0x46>
      printf("LSM6DSL gyroscope initialized successfully!\r\n");
 8000792:	4825      	ldr	r0, [pc, #148]	@ (8000828 <main+0xd4>)
 8000794:	f005 f9ba 	bl	8005b0c <puts>
 8000798:	e004      	b.n	80007a4 <main+0x50>
  } else {
      printf("Failed to initialize LSM6DSL gyroscope!\r\n");
 800079a:	4824      	ldr	r0, [pc, #144]	@ (800082c <main+0xd8>)
 800079c:	f005 f9b6 	bl	8005b0c <puts>
      Error_Handler();
 80007a0:	f000 fbc8 	bl	8000f34 <Error_Handler>
  }

  HAL_Delay(100);
 80007a4:	2064      	movs	r0, #100	@ 0x64
 80007a6:	f001 f805 	bl	80017b4 <HAL_Delay>
    /* USER CODE BEGIN 3 */
	  int16_t gyro_x, gyro_y, gyro_z;
	  int gyro_x_dps, gyro_y_dps, gyro_z_dps;

	  // Read gyroscope data
	  if (LSM6DSL_ReadGyro(&gyro_x, &gyro_y, &gyro_z) == HAL_OK) {
 80007aa:	1dba      	adds	r2, r7, #6
 80007ac:	f107 0108 	add.w	r1, r7, #8
 80007b0:	f107 030a 	add.w	r3, r7, #10
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff69 	bl	800068c <LSM6DSL_ReadGyro>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d12a      	bne.n	8000816 <main+0xc2>
	      // Convert to degrees per second
	      gyro_x_dps = LSM6DSL_ConvertGyro(gyro_x);
 80007c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff97 	bl	80006f8 <LSM6DSL_ConvertGyro>
 80007ca:	eef0 7a40 	vmov.f32	s15, s0
 80007ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d2:	ee17 3a90 	vmov	r3, s15
 80007d6:	617b      	str	r3, [r7, #20]
	      gyro_y_dps = LSM6DSL_ConvertGyro(gyro_y);
 80007d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff8b 	bl	80006f8 <LSM6DSL_ConvertGyro>
 80007e2:	eef0 7a40 	vmov.f32	s15, s0
 80007e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ea:	ee17 3a90 	vmov	r3, s15
 80007ee:	613b      	str	r3, [r7, #16]
	      gyro_z_dps = LSM6DSL_ConvertGyro(gyro_z);
 80007f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff7f 	bl	80006f8 <LSM6DSL_ConvertGyro>
 80007fa:	eef0 7a40 	vmov.f32	s15, s0
 80007fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000802:	ee17 3a90 	vmov	r3, s15
 8000806:	60fb      	str	r3, [r7, #12]

	      // Print values
	      printf("Gyro X: %d dps, Y: %d dps, Z: %d dps\r\n",
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	6979      	ldr	r1, [r7, #20]
 800080e:	4808      	ldr	r0, [pc, #32]	@ (8000830 <main+0xdc>)
 8000810:	f005 f914 	bl	8005a3c <iprintf>
 8000814:	e002      	b.n	800081c <main+0xc8>
	             gyro_x_dps, gyro_y_dps, gyro_z_dps);
	  } else {
	      printf("Failed to read gyroscope data!\r\n");
 8000816:	4807      	ldr	r0, [pc, #28]	@ (8000834 <main+0xe0>)
 8000818:	f005 f978 	bl	8005b0c <puts>
	  }

	  HAL_Delay(100);  // 100ms delay between readings
 800081c:	2064      	movs	r0, #100	@ 0x64
 800081e:	f000 ffc9 	bl	80017b4 <HAL_Delay>
  {
 8000822:	e7c2      	b.n	80007aa <main+0x56>
 8000824:	080067e8 	.word	0x080067e8
 8000828:	0800680c 	.word	0x0800680c
 800082c:	0800683c 	.word	0x0800683c
 8000830:	08006868 	.word	0x08006868
 8000834:	08006890 	.word	0x08006890

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b096      	sub	sp, #88	@ 0x58
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2244      	movs	r2, #68	@ 0x44
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f005 fa40 	bl	8005ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800085e:	f002 fb43 	bl	8002ee8 <HAL_PWREx_ControlVoltageScaling>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000868:	f000 fb64 	bl	8000f34 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800086c:	f002 fb1e 	bl	8002eac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000870:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <SystemClock_Config+0xc0>)
 8000872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000876:	4a20      	ldr	r2, [pc, #128]	@ (80008f8 <SystemClock_Config+0xc0>)
 8000878:	f023 0318 	bic.w	r3, r3, #24
 800087c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000880:	2314      	movs	r3, #20
 8000882:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000890:	2360      	movs	r3, #96	@ 0x60
 8000892:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000898:	2301      	movs	r3, #1
 800089a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008a0:	2328      	movs	r3, #40	@ 0x28
 80008a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a4:	2307      	movs	r3, #7
 80008a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fc39 	bl	800312c <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008c0:	f000 fb38 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2303      	movs	r3, #3
 80008ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	2104      	movs	r1, #4
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 f801 	bl	80038e4 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008e8:	f000 fb24 	bl	8000f34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008ec:	f003 fd08 	bl	8004300 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008f0:	bf00      	nop
 80008f2:	3758      	adds	r7, #88	@ 0x58
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000

080008fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000902:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <MX_DFSDM1_Init+0x6c>)
 8000904:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000908:	2201      	movs	r2, #1
 800090a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000914:	2202      	movs	r2, #2
 8000916:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800092a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800092c:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000934:	2204      	movs	r2, #4
 8000936:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000940:	2201      	movs	r2, #1
 8000942:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_DFSDM1_Init+0x68>)
 8000952:	f001 f865 	bl	8001a20 <HAL_DFSDM_ChannelInit>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800095c:	f000 faea 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000084 	.word	0x20000084
 8000968:	40016020 	.word	0x40016020

0800096c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <MX_I2C2_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <MX_I2C2_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_I2C2_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_I2C2_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <MX_I2C2_Init+0x74>)
 80009a8:	f001 fb2b 	bl	8002002 <HAL_I2C_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 fabf 	bl	8000f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <MX_I2C2_Init+0x74>)
 80009ba:	f002 f8ad 	bl	8002b18 <HAL_I2CEx_ConfigAnalogFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 fab6 	bl	8000f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_I2C2_Init+0x74>)
 80009cc:	f002 f8ef 	bl	8002bae <HAL_I2CEx_ConfigDigitalFilter>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 faad 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000bc 	.word	0x200000bc
 80009e4:	40005800 	.word	0x40005800
 80009e8:	10d19ce4 	.word	0x10d19ce4

080009ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_QUADSPI_Init+0x44>)
 80009f2:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MX_QUADSPI_Init+0x48>)
 80009f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_QUADSPI_Init+0x44>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_QUADSPI_Init+0x44>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a04:	2210      	movs	r2, #16
 8000a06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a0a:	2217      	movs	r2, #23
 8000a0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a1c:	f002 faca 	bl	8002fb4 <HAL_QSPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a26:	f000 fa85 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000110 	.word	0x20000110
 8000a34:	a0001000 	.word	0xa0001000

08000a38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab0 <MX_SPI3_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a52:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a86:	2207      	movs	r2, #7
 8000a88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a92:	2208      	movs	r2, #8
 8000a94:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_SPI3_Init+0x74>)
 8000a98:	f003 fe14 	bl	80046c4 <HAL_SPI_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000aa2:	f000 fa47 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000154 	.word	0x20000154
 8000ab0:	40003c00 	.word	0x40003c00

08000ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	@ (8000b10 <MX_USART1_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af8:	f003 fe87 	bl	800480a <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f000 fa17 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001b8 	.word	0x200001b8
 8000b10:	40013800 	.word	0x40013800

08000b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b1a:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <MX_USART3_UART_Init+0x5c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b58:	f003 fe57 	bl	800480a <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b62:	f000 f9e7 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000240 	.word	0x20000240
 8000b70:	40004800 	.word	0x40004800

08000b74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b82:	2206      	movs	r2, #6
 8000b84:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	f002 f845 	bl	8002c46 <HAL_PCD_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f000 f9b7 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200002c8 	.word	0x200002c8

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	4bbd      	ldr	r3, [pc, #756]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4abc      	ldr	r2, [pc, #752]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4bba      	ldr	r3, [pc, #744]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4bb7      	ldr	r3, [pc, #732]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4ab6      	ldr	r2, [pc, #728]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4bb4      	ldr	r3, [pc, #720]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4bb1      	ldr	r3, [pc, #708]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	4ab0      	ldr	r2, [pc, #704]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c22:	4bae      	ldr	r3, [pc, #696]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4bab      	ldr	r3, [pc, #684]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	4aaa      	ldr	r2, [pc, #680]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3a:	4ba8      	ldr	r3, [pc, #672]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	4ba5      	ldr	r3, [pc, #660]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	4aa4      	ldr	r2, [pc, #656]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c52:	4ba2      	ldr	r3, [pc, #648]	@ (8000edc <MX_GPIO_Init+0x30c>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000c64:	489e      	ldr	r0, [pc, #632]	@ (8000ee0 <MX_GPIO_Init+0x310>)
 8000c66:	f001 f991 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c74:	f001 f98a 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000c7e:	4899      	ldr	r0, [pc, #612]	@ (8000ee4 <MX_GPIO_Init+0x314>)
 8000c80:	f001 f984 	bl	8001f8c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8000c8a:	4897      	ldr	r0, [pc, #604]	@ (8000ee8 <MX_GPIO_Init+0x318>)
 8000c8c:	f001 f97e 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000c96:	4894      	ldr	r0, [pc, #592]	@ (8000ee8 <MX_GPIO_Init+0x318>)
 8000c98:	f001 f978 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ca2:	4892      	ldr	r0, [pc, #584]	@ (8000eec <MX_GPIO_Init+0x31c>)
 8000ca4:	f001 f972 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2120      	movs	r1, #32
 8000cac:	488d      	ldr	r0, [pc, #564]	@ (8000ee4 <MX_GPIO_Init+0x314>)
 8000cae:	f001 f96d 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	488a      	ldr	r0, [pc, #552]	@ (8000ee0 <MX_GPIO_Init+0x310>)
 8000cb8:	f001 f968 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cbc:	f240 1315 	movw	r3, #277	@ 0x115
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4882      	ldr	r0, [pc, #520]	@ (8000ee0 <MX_GPIO_Init+0x310>)
 8000cd6:	f000 ffaf 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000cda:	236a      	movs	r3, #106	@ 0x6a
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	487c      	ldr	r0, [pc, #496]	@ (8000ee0 <MX_GPIO_Init+0x310>)
 8000cf0:	f000 ffa2 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4878      	ldr	r0, [pc, #480]	@ (8000eec <MX_GPIO_Init+0x31c>)
 8000d0c:	f000 ff94 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d10:	233f      	movs	r3, #63	@ 0x3f
 8000d12:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d14:	230b      	movs	r3, #11
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4872      	ldr	r0, [pc, #456]	@ (8000eec <MX_GPIO_Init+0x31c>)
 8000d24:	f000 ff88 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f000 ff77 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d4a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d66:	f000 ff67 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d88:	f000 ff56 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d90:	230b      	movs	r3, #11
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da2:	f000 ff49 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000da6:	23e0      	movs	r3, #224	@ 0xe0
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db6:	2305      	movs	r3, #5
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f000 ff38 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dcc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4841      	ldr	r0, [pc, #260]	@ (8000ee4 <MX_GPIO_Init+0x314>)
 8000dde:	f000 ff2b 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000de6:	230b      	movs	r3, #11
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	483b      	ldr	r0, [pc, #236]	@ (8000ee4 <MX_GPIO_Init+0x314>)
 8000df6:	f000 ff1f 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dfa:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000dfe:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4834      	ldr	r0, [pc, #208]	@ (8000ee4 <MX_GPIO_Init+0x314>)
 8000e14:	f000 ff10 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
 8000e18:	f24c 4304 	movw	r3, #50180	@ 0xc404
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	482e      	ldr	r0, [pc, #184]	@ (8000ee8 <MX_GPIO_Init+0x318>)
 8000e30:	f000 ff02 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin
                           STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin
 8000e34:	f643 0381 	movw	r3, #14465	@ 0x3881
 8000e38:	617b      	str	r3, [r7, #20]
                          |STSAFE_A100_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4826      	ldr	r0, [pc, #152]	@ (8000ee8 <MX_GPIO_Init+0x318>)
 8000e4e:	f000 fef3 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e52:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4820      	ldr	r0, [pc, #128]	@ (8000eec <MX_GPIO_Init+0x31c>)
 8000e6c:	f000 fee4 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e70:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <MX_GPIO_Init+0x31c>)
 8000e88:	f000 fed6 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <MX_GPIO_Init+0x318>)
 8000ea8:	f000 fec6 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000eac:	2378      	movs	r3, #120	@ 0x78
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <MX_GPIO_Init+0x318>)
 8000ec8:	f000 feb6 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ecc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed2:	2312      	movs	r3, #18
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e00a      	b.n	8000ef0 <MX_GPIO_Init+0x320>
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48001000 	.word	0x48001000
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	48000c00 	.word	0x48000c00
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <MX_GPIO_Init+0x360>)
 8000f02:	f000 fe99 	bl	8001c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2017      	movs	r0, #23
 8000f0c:	f000 fd51 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f10:	2017      	movs	r0, #23
 8000f12:	f000 fd6a 	bl	80019ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2028      	movs	r0, #40	@ 0x28
 8000f1c:	f000 fd49 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f20:	2028      	movs	r0, #40	@ 0x28
 8000f22:	f000 fd62 	bl	80019ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	@ 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	48000400 	.word	0x48000400

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	4a08      	ldr	r2, [pc, #32]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2288      	movs	r2, #136	@ 0x88
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 fe8f 	bl	8005ccc <memset>
  if(DFSDM1_Init == 0)
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d142      	bne.n	800103c <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000fb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 feb0 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000fd2:	f7ff ffaf 	bl	8000f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fda:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fe0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffa:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001006:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800100a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001020:	2306      	movs	r3, #6
 8001022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001026:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800102a:	4619      	mov	r1, r3
 800102c:	4807      	ldr	r0, [pc, #28]	@ (800104c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800102e:	f000 fe03 	bl	8001c38 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a02      	ldr	r2, [pc, #8]	@ (8001044 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800103a:	6013      	str	r3, [r2, #0]
  }

}
 800103c:	bf00      	nop
 800103e:	37b0      	adds	r7, #176	@ 0xb0
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200007ac 	.word	0x200007ac
 8001048:	40021000 	.word	0x40021000
 800104c:	48001000 	.word	0x48001000

08001050 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0ac      	sub	sp, #176	@ 0xb0
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2288      	movs	r2, #136	@ 0x88
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f004 fe2b 	bl	8005ccc <memset>
  if(hi2c->Instance==I2C2)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <HAL_I2C_MspInit+0xb0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d13b      	bne.n	80010f8 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001084:	2300      	movs	r3, #0
 8001086:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fe4d 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001098:	f7ff ff4c 	bl	8000f34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_I2C_MspInit+0xb4>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a0:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <HAL_I2C_MspInit+0xb4>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_I2C_MspInit+0xb4>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010ce:	2304      	movs	r3, #4
 80010d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_I2C_MspInit+0xb8>)
 80010dc:	f000 fdac 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0xb4>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_I2C_MspInit+0xb4>)
 80010e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_I2C_MspInit+0xb4>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010f8:	bf00      	nop
 80010fa:	37b0      	adds	r7, #176	@ 0xb0
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40005800 	.word	0x40005800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000400 	.word	0x48000400

0800110c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a17      	ldr	r2, [pc, #92]	@ (8001188 <HAL_QSPI_MspInit+0x7c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d128      	bne.n	8001180 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <HAL_QSPI_MspInit+0x80>)
 8001130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001132:	4a16      	ldr	r2, [pc, #88]	@ (800118c <HAL_QSPI_MspInit+0x80>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001138:	6513      	str	r3, [r2, #80]	@ 0x50
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <HAL_QSPI_MspInit+0x80>)
 800113c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_QSPI_MspInit+0x80>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	4a10      	ldr	r2, [pc, #64]	@ (800118c <HAL_QSPI_MspInit+0x80>)
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_QSPI_MspInit+0x80>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800115e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001162:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001170:	230a      	movs	r3, #10
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <HAL_QSPI_MspInit+0x84>)
 800117c:	f000 fd5c 	bl	8001c38 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	@ 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	a0001000 	.word	0xa0001000
 800118c:	40021000 	.word	0x40021000
 8001190:	48001000 	.word	0x48001000

08001194 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <HAL_SPI_MspInit+0x7c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d128      	bne.n	8001208 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <HAL_SPI_MspInit+0x80>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <HAL_SPI_MspInit+0x80>)
 80011bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <HAL_SPI_MspInit+0x80>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_SPI_MspInit+0x80>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a10      	ldr	r2, [pc, #64]	@ (8001214 <HAL_SPI_MspInit+0x80>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_SPI_MspInit+0x80>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011e6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011f8:	2306      	movs	r3, #6
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <HAL_SPI_MspInit+0x84>)
 8001204:	f000 fd18 	bl	8001c38 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	@ 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40003c00 	.word	0x40003c00
 8001214:	40021000 	.word	0x40021000
 8001218:	48000800 	.word	0x48000800

0800121c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ae      	sub	sp, #184	@ 0xb8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2288      	movs	r2, #136	@ 0x88
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f004 fd45 	bl	8005ccc <memset>
  if(huart->Instance==USART1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a42      	ldr	r2, [pc, #264]	@ (8001350 <HAL_UART_MspInit+0x134>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d13b      	bne.n	80012c4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001250:	2300      	movs	r3, #0
 8001252:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fd67 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001264:	f7ff fe66 	bl	8000f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001268:	4b3a      	ldr	r3, [pc, #232]	@ (8001354 <HAL_UART_MspInit+0x138>)
 800126a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126c:	4a39      	ldr	r2, [pc, #228]	@ (8001354 <HAL_UART_MspInit+0x138>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001272:	6613      	str	r3, [r2, #96]	@ 0x60
 8001274:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <HAL_UART_MspInit+0x138>)
 8001276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <HAL_UART_MspInit+0x138>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	4a33      	ldr	r2, [pc, #204]	@ (8001354 <HAL_UART_MspInit+0x138>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128c:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <HAL_UART_MspInit+0x138>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001298:	23c0      	movs	r3, #192	@ 0xc0
 800129a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b0:	2307      	movs	r3, #7
 80012b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4826      	ldr	r0, [pc, #152]	@ (8001358 <HAL_UART_MspInit+0x13c>)
 80012be:	f000 fcbb 	bl	8001c38 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80012c2:	e040      	b.n	8001346 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a24      	ldr	r2, [pc, #144]	@ (800135c <HAL_UART_MspInit+0x140>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d13b      	bne.n	8001346 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ce:	2304      	movs	r3, #4
 80012d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fd26 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_UART_MspInit+0xce>
      Error_Handler();
 80012e6:	f7ff fe25 	bl	8000f34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_UART_MspInit+0x138>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ee:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <HAL_UART_MspInit+0x138>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <HAL_UART_MspInit+0x138>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_UART_MspInit+0x138>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a13      	ldr	r2, [pc, #76]	@ (8001354 <HAL_UART_MspInit+0x138>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_UART_MspInit+0x138>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800131a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800131e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001334:	2307      	movs	r3, #7
 8001336:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	@ (8001360 <HAL_UART_MspInit+0x144>)
 8001342:	f000 fc79 	bl	8001c38 <HAL_GPIO_Init>
}
 8001346:	bf00      	nop
 8001348:	37b8      	adds	r7, #184	@ 0xb8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40013800 	.word	0x40013800
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400
 800135c:	40004800 	.word	0x40004800
 8001360:	48000c00 	.word	0x48000c00

08001364 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0ac      	sub	sp, #176	@ 0xb0
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2288      	movs	r2, #136	@ 0x88
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f004 fca1 	bl	8005ccc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001392:	d17c      	bne.n	800148e <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001398:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800139a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800139e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013aa:	2318      	movs	r3, #24
 80013ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013ae:	2307      	movs	r3, #7
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80013ba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013be:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fcb1 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80013d0:	f7ff fdb0 	bl	8000f34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140a:	f000 fc15 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800140e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001412:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001428:	230a      	movs	r3, #10
 800142a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f000 fbfe 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	4a15      	ldr	r2, [pc, #84]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 8001442:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001446:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d114      	bne.n	800148a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	4a0c      	ldr	r2, [pc, #48]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146a:	6593      	str	r3, [r2, #88]	@ 0x58
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001478:	f001 fd8c 	bl	8002f94 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <HAL_PCD_MspInit+0x134>)
 8001482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001486:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001488:	e001      	b.n	800148e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800148a:	f001 fd83 	bl	8002f94 <HAL_PWREx_EnableVddUSB>
}
 800148e:	bf00      	nop
 8001490:	37b0      	adds	r7, #176	@ 0xb0
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <NMI_Handler+0x4>

080014a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <MemManage_Handler+0x4>

080014b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f2:	f000 f93f 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}

080014fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80014fe:	2020      	movs	r0, #32
 8001500:	f000 fd5c 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001504:	2040      	movs	r0, #64	@ 0x40
 8001506:	f000 fd59 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800150a:	2080      	movs	r0, #128	@ 0x80
 800150c:	f000 fd56 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001510:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001514:	f000 fd52 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001520:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001524:	f000 fd4a 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001528:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800152c:	f000 fd46 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001530:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001534:	f000 fd42 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001538:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800153c:	f000 fd3e 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e00a      	b.n	800156c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001556:	f3af 8000 	nop.w
 800155a:	4601      	mov	r1, r0
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	b2ca      	uxtb	r2, r1
 8001564:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	dbf0      	blt.n	8001556 <_read+0x12>
  }

  return len;
 8001574:	687b      	ldr	r3, [r7, #4]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_close>:
  }
  return len;
}

int _close(int file)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a6:	605a      	str	r2, [r3, #4]
  return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_isatty>:

int _isatty(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f004 fba6 	bl	8005d68 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20018000 	.word	0x20018000
 8001648:	00000400 	.word	0x00000400
 800164c:	200007b0 	.word	0x200007b0
 8001650:	20000928 	.word	0x20000928

08001654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800167c:	f7ff ffea 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001680:	480c      	ldr	r0, [pc, #48]	@ (80016b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001682:	490d      	ldr	r1, [pc, #52]	@ (80016b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <LoopForever+0xe>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001698:	4c0a      	ldr	r4, [pc, #40]	@ (80016c4 <LoopForever+0x16>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a6:	f004 fb65 	bl	8005d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016aa:	f7ff f853 	bl	8000754 <main>

080016ae <LoopForever>:

LoopForever:
    b LoopForever
 80016ae:	e7fe      	b.n	80016ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016bc:	0800693c 	.word	0x0800693c
  ldr r2, =_sbss
 80016c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016c4:	20000928 	.word	0x20000928

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>

080016ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f961 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f80e 	bl	80016fc <HAL_InitTick>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	e001      	b.n	80016f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ec:	f7ff fc28 	bl	8000f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <HAL_InitTick+0x6c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d023      	beq.n	8001758 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_InitTick+0x70>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <HAL_InitTick+0x6c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f96d 	bl	8001a06 <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d809      	bhi.n	800174c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f937 	bl	80019b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001744:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <HAL_InitTick+0x74>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e007      	b.n	800175c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e004      	b.n	800175c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e001      	b.n	800175c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008
 8001798:	200007b4 	.word	0x200007b4

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200007b4 	.word	0x200007b4

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	@ (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	@ (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0ac      	b.n	8001b8c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f8b2 	bl	8001ba0 <DFSDM_GetChannelFromInstance>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a55      	ldr	r2, [pc, #340]	@ (8001b94 <HAL_DFSDM_ChannelInit+0x174>)
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e09f      	b.n	8001b8c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fa9b 	bl	8000f88 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a52:	4b51      	ldr	r3, [pc, #324]	@ (8001b98 <HAL_DFSDM_ChannelInit+0x178>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a4f      	ldr	r2, [pc, #316]	@ (8001b98 <HAL_DFSDM_ChannelInit+0x178>)
 8001a5a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b98 <HAL_DFSDM_ChannelInit+0x178>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d125      	bne.n	8001ab0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a64:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a4c      	ldr	r2, [pc, #304]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001a6e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a70:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4948      	ldr	r1, [pc, #288]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a46      	ldr	r2, [pc, #280]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a84:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001a88:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	791b      	ldrb	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a92:	4b42      	ldr	r3, [pc, #264]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	493f      	ldr	r1, [pc, #252]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001aaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001aae:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001abe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ace:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ad4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 020f 	bic.w	r2, r2, #15
 8001aec:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001b14:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	3b01      	subs	r3, #1
 8001b26:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f002 0207 	and.w	r2, r2, #7
 8001b40:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f810 	bl	8001ba0 <DFSDM_GetChannelFromInstance>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4904      	ldr	r1, [pc, #16]	@ (8001b94 <HAL_DFSDM_ChannelInit+0x174>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200007bc 	.word	0x200007bc
 8001b98:	200007b8 	.word	0x200007b8
 8001b9c:	40016000 	.word	0x40016000

08001ba0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c1c <DFSDM_GetChannelFromInstance+0x7c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d102      	bne.n	8001bb6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e02b      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <DFSDM_GetChannelFromInstance+0x80>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d102      	bne.n	8001bc4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e024      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a17      	ldr	r2, [pc, #92]	@ (8001c24 <DFSDM_GetChannelFromInstance+0x84>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d102      	bne.n	8001bd2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e01d      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <DFSDM_GetChannelFromInstance+0x88>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d102      	bne.n	8001be0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e016      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <DFSDM_GetChannelFromInstance+0x8c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d102      	bne.n	8001bee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001be8:	2305      	movs	r3, #5
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e00f      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <DFSDM_GetChannelFromInstance+0x90>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d102      	bne.n	8001bfc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e008      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <DFSDM_GetChannelFromInstance+0x94>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d102      	bne.n	8001c0a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001c04:	2307      	movs	r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e001      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40016000 	.word	0x40016000
 8001c20:	40016020 	.word	0x40016020
 8001c24:	40016040 	.word	0x40016040
 8001c28:	40016080 	.word	0x40016080
 8001c2c:	400160a0 	.word	0x400160a0
 8001c30:	400160c0 	.word	0x400160c0
 8001c34:	400160e0 	.word	0x400160e0

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c46:	e17f      	b.n	8001f48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8171 	beq.w	8001f42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d005      	beq.n	8001c78 <HAL_GPIO_Init+0x40>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d130      	bne.n	8001cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cae:	2201      	movs	r2, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 0201 	and.w	r2, r3, #1
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d118      	bne.n	8001d18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d017      	beq.n	8001d54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d123      	bne.n	8001da8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	6939      	ldr	r1, [r7, #16]
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80ac 	beq.w	8001f42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	4b5f      	ldr	r3, [pc, #380]	@ (8001f68 <HAL_GPIO_Init+0x330>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	4a5e      	ldr	r2, [pc, #376]	@ (8001f68 <HAL_GPIO_Init+0x330>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001df6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f68 <HAL_GPIO_Init+0x330>)
 8001df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e02:	4a5a      	ldr	r2, [pc, #360]	@ (8001f6c <HAL_GPIO_Init+0x334>)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x242>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4f      	ldr	r2, [pc, #316]	@ (8001f70 <HAL_GPIO_Init+0x338>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x23e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4e      	ldr	r2, [pc, #312]	@ (8001f74 <HAL_GPIO_Init+0x33c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x23a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	@ (8001f78 <HAL_GPIO_Init+0x340>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x236>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <HAL_GPIO_Init+0x344>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x232>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	@ (8001f80 <HAL_GPIO_Init+0x348>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x22e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	@ (8001f84 <HAL_GPIO_Init+0x34c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x22a>
 8001e5e:	2306      	movs	r3, #6
 8001e60:	e00c      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e00a      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e66:	2305      	movs	r3, #5
 8001e68:	e008      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e8c:	4937      	ldr	r1, [pc, #220]	@ (8001f6c <HAL_GPIO_Init+0x334>)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ebe:	4a32      	ldr	r2, [pc, #200]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec4:	4b30      	ldr	r3, [pc, #192]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee8:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f12:	4a1d      	ldr	r2, [pc, #116]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3c:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f47f ae78 	bne.w	8001c48 <HAL_GPIO_Init+0x10>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	48001400 	.word	0x48001400
 8001f84:	48001800 	.word	0x48001800
 8001f88:	40010400 	.word	0x40010400

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f806 	bl	8001fec <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40010400 	.word	0x40010400

08001fec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e08d      	b.n	8002130 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff f811 	bl	8001050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2224      	movs	r2, #36	@ 0x24
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002052:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002062:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	e006      	b.n	800208a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002088:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d108      	bne.n	80020a4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	e007      	b.n	80020b4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69d9      	ldr	r1, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	f040 80f9 	bne.w	8002352 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_I2C_Mem_Write+0x34>
 8002166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002172:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0ed      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_I2C_Mem_Write+0x4e>
 8002182:	2302      	movs	r3, #2
 8002184:	e0e6      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800218e:	f7ff fb05 	bl	800179c <HAL_GetTick>
 8002192:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2319      	movs	r3, #25
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fac3 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d1      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2221      	movs	r2, #33	@ 0x21
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d8:	88f8      	ldrh	r0, [r7, #6]
 80021da:	893a      	ldrh	r2, [r7, #8]
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f9d3 	bl	8002594 <I2C_RequestMemoryWrite>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0a9      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2bff      	cmp	r3, #255	@ 0xff
 8002208:	d90e      	bls.n	8002228 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	22ff      	movs	r2, #255	@ 0xff
 800220e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	b2da      	uxtb	r2, r3
 8002216:	8979      	ldrh	r1, [r7, #10]
 8002218:	2300      	movs	r3, #0
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fc47 	bl	8002ab4 <I2C_TransferConfig>
 8002226:	e00f      	b.n	8002248 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002236:	b2da      	uxtb	r2, r3
 8002238:	8979      	ldrh	r1, [r7, #10]
 800223a:	2300      	movs	r3, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fc36 	bl	8002ab4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fac6 	bl	80027de <I2C_WaitOnTXISFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e07b      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d034      	beq.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	d130      	bne.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fa3f 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e04d      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2bff      	cmp	r3, #255	@ 0xff
 80022c0:	d90e      	bls.n	80022e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	22ff      	movs	r2, #255	@ 0xff
 80022c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	2300      	movs	r3, #0
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fbeb 	bl	8002ab4 <I2C_TransferConfig>
 80022de:	e00f      	b.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	8979      	ldrh	r1, [r7, #10]
 80022f2:	2300      	movs	r3, #0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fbda 	bl	8002ab4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d19e      	bne.n	8002248 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 faac 	bl	800286c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e01a      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2220      	movs	r2, #32
 8002324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HAL_I2C_Mem_Write+0x224>)
 8002332:	400b      	ands	r3, r1
 8002334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
  }
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	fe00e800 	.word	0xfe00e800

08002360 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	817b      	strh	r3, [r7, #10]
 8002372:	460b      	mov	r3, r1
 8002374:	813b      	strh	r3, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	f040 80fd 	bne.w	8002582 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_I2C_Mem_Read+0x34>
 800238e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800239a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0f1      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Mem_Read+0x4e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e0ea      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b6:	f7ff f9f1 	bl	800179c <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f9af 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d5      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2222      	movs	r2, #34	@ 0x22
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002400:	88f8      	ldrh	r0, [r7, #6]
 8002402:	893a      	ldrh	r2, [r7, #8]
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4603      	mov	r3, r0
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f913 	bl	800263c <I2C_RequestMemoryRead>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0ad      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	2bff      	cmp	r3, #255	@ 0xff
 8002430:	d90e      	bls.n	8002450 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	b2da      	uxtb	r2, r3
 800243e:	8979      	ldrh	r1, [r7, #10]
 8002440:	4b52      	ldr	r3, [pc, #328]	@ (800258c <HAL_I2C_Mem_Read+0x22c>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fb33 	bl	8002ab4 <I2C_TransferConfig>
 800244e:	e00f      	b.n	8002470 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	b2da      	uxtb	r2, r3
 8002460:	8979      	ldrh	r1, [r7, #10]
 8002462:	4b4a      	ldr	r3, [pc, #296]	@ (800258c <HAL_I2C_Mem_Read+0x22c>)
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fb22 	bl	8002ab4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	2104      	movs	r1, #4
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f956 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07c      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d034      	beq.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d130      	bne.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	@ 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f927 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e04d      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2bff      	cmp	r3, #255	@ 0xff
 80024f0:	d90e      	bls.n	8002510 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fad3 	bl	8002ab4 <I2C_TransferConfig>
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fac2 	bl	8002ab4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d19a      	bne.n	8002470 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f994 	bl	800286c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01a      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_I2C_Mem_Read+0x230>)
 8002562:	400b      	ands	r3, r1
 8002564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	80002400 	.word	0x80002400
 8002590:	fe00e800 	.word	0xfe00e800

08002594 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	817b      	strh	r3, [r7, #10]
 80025a6:	460b      	mov	r3, r1
 80025a8:	813b      	strh	r3, [r7, #8]
 80025aa:	4613      	mov	r3, r2
 80025ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <I2C_RequestMemoryWrite+0xa4>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa79 	bl	8002ab4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	69b9      	ldr	r1, [r7, #24]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f909 	bl	80027de <I2C_WaitOnTXISFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e02c      	b.n	8002630 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025dc:	893b      	ldrh	r3, [r7, #8]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80025e6:	e015      	b.n	8002614 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025e8:	893b      	ldrh	r3, [r7, #8]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	69b9      	ldr	r1, [r7, #24]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f8ef 	bl	80027de <I2C_WaitOnTXISFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e012      	b.n	8002630 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800260a:	893b      	ldrh	r3, [r7, #8]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2200      	movs	r2, #0
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f884 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	80002000 	.word	0x80002000

0800263c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	4608      	mov	r0, r1
 8002646:	4611      	mov	r1, r2
 8002648:	461a      	mov	r2, r3
 800264a:	4603      	mov	r3, r0
 800264c:	817b      	strh	r3, [r7, #10]
 800264e:	460b      	mov	r3, r1
 8002650:	813b      	strh	r3, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <I2C_RequestMemoryRead+0xa4>)
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2300      	movs	r3, #0
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fa26 	bl	8002ab4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f8b6 	bl	80027de <I2C_WaitOnTXISFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e02c      	b.n	80026d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d105      	bne.n	800268e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002682:	893b      	ldrh	r3, [r7, #8]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	629a      	str	r2, [r3, #40]	@ 0x28
 800268c:	e015      	b.n	80026ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800268e:	893b      	ldrh	r3, [r7, #8]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	b29b      	uxth	r3, r3
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f89c 	bl	80027de <I2C_WaitOnTXISFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e012      	b.n	80026d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2140      	movs	r1, #64	@ 0x40
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f831 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	80002000 	.word	0x80002000

080026e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d103      	bne.n	8002702 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2200      	movs	r2, #0
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d007      	beq.n	8002720 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	619a      	str	r2, [r3, #24]
  }
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800273c:	e03b      	b.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	6839      	ldr	r1, [r7, #0]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f8d6 	bl	80028f4 <I2C_IsErrorOccurred>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e041      	b.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d02d      	beq.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7ff f81f 	bl	800179c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <I2C_WaitOnFlagUntilTimeout+0x44>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d122      	bne.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4013      	ands	r3, r2
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	429a      	cmp	r2, r3
 800278c:	d113      	bne.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	bf0c      	ite	eq
 80027c6:	2301      	moveq	r3, #1
 80027c8:	2300      	movne	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d0b4      	beq.n	800273e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027ea:	e033      	b.n	8002854 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f87f 	bl	80028f4 <I2C_IsErrorOccurred>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e031      	b.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002806:	d025      	beq.n	8002854 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002808:	f7fe ffc8 	bl	800179c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	429a      	cmp	r2, r3
 8002816:	d302      	bcc.n	800281e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11a      	bne.n	8002854 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d013      	beq.n	8002854 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d1c4      	bne.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002878:	e02f      	b.n	80028da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f838 	bl	80028f4 <I2C_IsErrorOccurred>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e02d      	b.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7fe ff85 	bl	800179c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11a      	bne.n	80028da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d013      	beq.n	80028da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e007      	b.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d1c8      	bne.n	800287a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d068      	beq.n	80029f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2210      	movs	r2, #16
 8002926:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002928:	e049      	b.n	80029be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d045      	beq.n	80029be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7fe ff33 	bl	800179c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_IsErrorOccurred+0x54>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d13a      	bne.n	80029be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002952:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800295a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800296a:	d121      	bne.n	80029b0 <I2C_IsErrorOccurred+0xbc>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002972:	d01d      	beq.n	80029b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b20      	cmp	r3, #32
 8002978:	d01a      	beq.n	80029b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002988:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800298a:	f7fe ff07 	bl	800179c <HAL_GetTick>
 800298e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002990:	e00e      	b.n	80029b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002992:	f7fe ff03 	bl	800179c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b19      	cmp	r3, #25
 800299e:	d907      	bls.n	80029b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80029ae:	e006      	b.n	80029be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d1e9      	bne.n	8002992 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d003      	beq.n	80029d4 <I2C_IsErrorOccurred+0xe0>
 80029cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0aa      	beq.n	800292a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2220      	movs	r2, #32
 80029e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01c      	beq.n	8002aa2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff fe3b 	bl	80026e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <I2C_IsErrorOccurred+0x1bc>)
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3728      	adds	r7, #40	@ 0x28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	fe00e800 	.word	0xfe00e800

08002ab4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac6:	897b      	ldrh	r3, [r7, #10]
 8002ac8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002acc:	7a7b      	ldrb	r3, [r7, #9]
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ae2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	0d5b      	lsrs	r3, r3, #21
 8002aee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <I2C_TransferConfig+0x60>)
 8002af4:	430b      	orrs	r3, r1
 8002af6:	43db      	mvns	r3, r3
 8002af8:	ea02 0103 	and.w	r1, r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	03ff63ff 	.word	0x03ff63ff

08002b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d138      	bne.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e032      	b.n	8002ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2224      	movs	r2, #36	@ 0x24
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d139      	bne.n	8002c38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e033      	b.n	8002c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2224      	movs	r2, #36	@ 0x24
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e101      	b.n	8002e5c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe fb79 	bl	8001364 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2203      	movs	r2, #3
 8002c76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 fb97 	bl	80053b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7c1a      	ldrb	r2, [r3, #16]
 8002c92:	f88d 2000 	strb.w	r2, [sp]
 8002c96:	3304      	adds	r3, #4
 8002c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c9a:	f002 fb60 	bl	800535e <USB_CoreInit>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0d5      	b.n	8002e5c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 fb8f 	bl	80053da <USB_SetCurrentMode>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0c6      	b.n	8002e5c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e04a      	b.n	8002d6a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3315      	adds	r3, #21
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	b298      	uxth	r0, r3
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	332e      	adds	r3, #46	@ 0x2e
 8002d10:	4602      	mov	r2, r0
 8002d12:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3318      	adds	r3, #24
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	331c      	adds	r3, #28
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3324      	adds	r3, #36	@ 0x24
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	3301      	adds	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	791b      	ldrb	r3, [r3, #4]
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3af      	bcc.n	8002cd4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e044      	b.n	8002e04 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	3301      	adds	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d3b5      	bcc.n	8002d7a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7c1a      	ldrb	r2, [r3, #16]
 8002e16:	f88d 2000 	strb.w	r2, [sp]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e1e:	f002 fb29 	bl	8005474 <USB_DevInit>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e013      	b.n	8002e5c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7b1b      	ldrb	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d102      	bne.n	8002e50 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f80a 	bl	8002e64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 fcce 	bl	80057f6 <USB_DevDisconnect>

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	f043 0303 	orr.w	r3, r3, #3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000

08002ecc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ed0:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef6:	d130      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef8:	4b23      	ldr	r3, [pc, #140]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f04:	d038      	beq.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f06:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f16:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2232      	movs	r2, #50	@ 0x32
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	4a1b      	ldr	r2, [pc, #108]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9b      	lsrs	r3, r3, #18
 8002f28:	3301      	adds	r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2c:	e002      	b.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f34:	4b14      	ldr	r3, [pc, #80]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f40:	d102      	bne.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f2      	bne.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f48:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f54:	d110      	bne.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e00f      	b.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f66:	d007      	beq.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f68:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f70:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	431bde83 	.word	0x431bde83

08002f94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fa2:	6053      	str	r3, [r2, #4]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7fe fbee 	bl	800179c <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e063      	b.n	8003094 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe f893 	bl	800110c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002fe6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f858 	bl	80030a0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	2120      	movs	r1, #32
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f850 	bl	80030bc <QSPI_WaitFlagStateUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003020:	7afb      	ldrb	r3, [r7, #11]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d131      	bne.n	800308a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003030:	f023 0310 	bic.w	r3, r3, #16
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6852      	ldr	r2, [r2, #4]
 8003038:	0611      	lsls	r1, r2, #24
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4b13      	ldr	r3, [pc, #76]	@ (800309c <HAL_QSPI_Init+0xe8>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6912      	ldr	r2, [r2, #16]
 8003056:	0411      	lsls	r1, r2, #16
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6952      	ldr	r2, [r2, #20]
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6992      	ldr	r2, [r2, #24]
 8003062:	4311      	orrs	r1, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	430b      	orrs	r3, r1
 800306a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8003092:	7afb      	ldrb	r3, [r7, #11]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	ffe0f8fe 	.word	0xffe0f8fe

080030a0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80030cc:	e01a      	b.n	8003104 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d016      	beq.n	8003104 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7fe fb61 	bl	800179c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <QSPI_WaitFlagStateUntilTimeout+0x30>
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2204      	movs	r2, #4
 80030f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e00e      	b.n	8003122 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	429a      	cmp	r2, r3
 800311e:	d1d6      	bne.n	80030ce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e3ca      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313e:	4b97      	ldr	r3, [pc, #604]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003148:	4b94      	ldr	r3, [pc, #592]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80e4 	beq.w	8003328 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <HAL_RCC_OscConfig+0x4a>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	f040 808b 	bne.w	8003284 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 8087 	bne.w	8003284 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003176:	4b89      	ldr	r3, [pc, #548]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_RCC_OscConfig+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e3a2      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	4b82      	ldr	r3, [pc, #520]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_RCC_OscConfig+0x7c>
 800319e:	4b7f      	ldr	r3, [pc, #508]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a6:	e005      	b.n	80031b4 <HAL_RCC_OscConfig+0x88>
 80031a8:	4b7c      	ldr	r3, [pc, #496]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d223      	bcs.n	8003200 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fd55 	bl	8003c6c <RCC_SetFlashLatencyFromMSIRange>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e383      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031cc:	4b73      	ldr	r3, [pc, #460]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a72      	ldr	r2, [pc, #456]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031d2:	f043 0308 	orr.w	r3, r3, #8
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b70      	ldr	r3, [pc, #448]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	496d      	ldr	r1, [pc, #436]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ea:	4b6c      	ldr	r3, [pc, #432]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4968      	ldr	r1, [pc, #416]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]
 80031fe:	e025      	b.n	800324c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003200:	4b66      	ldr	r3, [pc, #408]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a65      	ldr	r2, [pc, #404]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003206:	f043 0308 	orr.w	r3, r3, #8
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b63      	ldr	r3, [pc, #396]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4960      	ldr	r1, [pc, #384]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321e:	4b5f      	ldr	r3, [pc, #380]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	495b      	ldr	r1, [pc, #364]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fd15 	bl	8003c6c <RCC_SetFlashLatencyFromMSIRange>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e343      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800324c:	f000 fc4a 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b52      	ldr	r3, [pc, #328]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	4950      	ldr	r1, [pc, #320]	@ (80033a0 <HAL_RCC_OscConfig+0x274>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
 8003268:	4a4e      	ldr	r2, [pc, #312]	@ (80033a4 <HAL_RCC_OscConfig+0x278>)
 800326a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800326c:	4b4e      	ldr	r3, [pc, #312]	@ (80033a8 <HAL_RCC_OscConfig+0x27c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fa43 	bl	80016fc <HAL_InitTick>
 8003276:	4603      	mov	r3, r0
 8003278:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d052      	beq.n	8003326 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	e327      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d032      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800328c:	4b43      	ldr	r3, [pc, #268]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a42      	ldr	r2, [pc, #264]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003298:	f7fe fa80 	bl	800179c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a0:	f7fe fa7c 	bl	800179c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e310      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b2:	4b3a      	ldr	r3, [pc, #232]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032be:	4b37      	ldr	r3, [pc, #220]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a36      	ldr	r2, [pc, #216]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b34      	ldr	r3, [pc, #208]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4931      	ldr	r1, [pc, #196]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032dc:	4b2f      	ldr	r3, [pc, #188]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	492c      	ldr	r1, [pc, #176]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	e01a      	b.n	8003328 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032f2:	4b2a      	ldr	r3, [pc, #168]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a29      	ldr	r2, [pc, #164]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fa4d 	bl	800179c <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003306:	f7fe fa49 	bl	800179c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e2dd      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003318:	4b20      	ldr	r3, [pc, #128]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x1da>
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003326:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d074      	beq.n	800341e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d005      	beq.n	8003346 <HAL_RCC_OscConfig+0x21a>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d10e      	bne.n	800335e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d10b      	bne.n	800335e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d064      	beq.n	800341c <HAL_RCC_OscConfig+0x2f0>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d160      	bne.n	800341c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e2ba      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x24a>
 8003368:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0b      	ldr	r2, [pc, #44]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e026      	b.n	80033c4 <HAL_RCC_OscConfig+0x298>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800337e:	d115      	bne.n	80033ac <HAL_RCC_OscConfig+0x280>
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a05      	ldr	r2, [pc, #20]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a02      	ldr	r2, [pc, #8]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	e014      	b.n	80033c4 <HAL_RCC_OscConfig+0x298>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	080068b0 	.word	0x080068b0
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004
 80033ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a9c      	ldr	r2, [pc, #624]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe f9e6 	bl	800179c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe f9e2 	bl	800179c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	@ 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e276      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	4b92      	ldr	r3, [pc, #584]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2a8>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe f9d2 	bl	800179c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe f9ce 	bl	800179c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e262      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340e:	4b88      	ldr	r3, [pc, #544]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x2d0>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d060      	beq.n	80034ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d005      	beq.n	800343c <HAL_RCC_OscConfig+0x310>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d119      	bne.n	800346a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d116      	bne.n	800346a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800343c:	4b7c      	ldr	r3, [pc, #496]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_OscConfig+0x328>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e23f      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4b76      	ldr	r3, [pc, #472]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	4973      	ldr	r1, [pc, #460]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003468:	e040      	b.n	80034ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d023      	beq.n	80034ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003472:	4b6f      	ldr	r3, [pc, #444]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6e      	ldr	r2, [pc, #440]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe f98d 	bl	800179c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe f989 	bl	800179c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e21d      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003498:	4b65      	ldr	r3, [pc, #404]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b62      	ldr	r3, [pc, #392]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	495f      	ldr	r1, [pc, #380]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
 80034b8:	e018      	b.n	80034ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a5c      	ldr	r2, [pc, #368]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe f969 	bl	800179c <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe f965 	bl	800179c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1f9      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e0:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03c      	beq.n	8003572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01c      	beq.n	800353a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003500:	4b4b      	ldr	r3, [pc, #300]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003506:	4a4a      	ldr	r2, [pc, #296]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe f944 	bl	800179c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003518:	f7fe f940 	bl	800179c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1d4      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800352a:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800352c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ef      	beq.n	8003518 <HAL_RCC_OscConfig+0x3ec>
 8003538:	e01b      	b.n	8003572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353a:	4b3d      	ldr	r3, [pc, #244]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800353c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003540:	4a3b      	ldr	r2, [pc, #236]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fe f927 	bl	800179c <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003552:	f7fe f923 	bl	800179c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1b7      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003564:	4b32      	ldr	r3, [pc, #200]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ef      	bne.n	8003552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a6 	beq.w	80036cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003584:	4b2a      	ldr	r3, [pc, #168]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10d      	bne.n	80035ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003594:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359a:	6593      	str	r3, [r2, #88]	@ 0x58
 800359c:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ac:	4b21      	ldr	r3, [pc, #132]	@ (8003634 <HAL_RCC_OscConfig+0x508>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d118      	bne.n	80035ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003634 <HAL_RCC_OscConfig+0x508>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_RCC_OscConfig+0x508>)
 80035be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c4:	f7fe f8ea 	bl	800179c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035cc:	f7fe f8e6 	bl	800179c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e17a      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <HAL_RCC_OscConfig+0x508>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_OscConfig+0x4d8>
 80035f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003602:	e029      	b.n	8003658 <HAL_RCC_OscConfig+0x52c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d115      	bne.n	8003638 <HAL_RCC_OscConfig+0x50c>
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	4a07      	ldr	r2, [pc, #28]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003622:	4a03      	ldr	r2, [pc, #12]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800362c:	e014      	b.n	8003658 <HAL_RCC_OscConfig+0x52c>
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
 8003638:	4b9c      	ldr	r3, [pc, #624]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363e:	4a9b      	ldr	r2, [pc, #620]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003648:	4b98      	ldr	r3, [pc, #608]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364e:	4a97      	ldr	r2, [pc, #604]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fe f89c 	bl	800179c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe f898 	bl	800179c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e12a      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367e:	4b8b      	ldr	r3, [pc, #556]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ed      	beq.n	8003668 <HAL_RCC_OscConfig+0x53c>
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fe f885 	bl	800179c <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fe f881 	bl	800179c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e113      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ac:	4b7f      	ldr	r3, [pc, #508]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ed      	bne.n	8003696 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b7a      	ldr	r3, [pc, #488]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	4a79      	ldr	r2, [pc, #484]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80fe 	beq.w	80038d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	2b02      	cmp	r3, #2
 80036dc:	f040 80d0 	bne.w	8003880 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036e0:	4b72      	ldr	r3, [pc, #456]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d130      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	3b01      	subs	r3, #1
 8003700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d127      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d11f      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003720:	2a07      	cmp	r2, #7
 8003722:	bf14      	ite	ne
 8003724:	2201      	movne	r2, #1
 8003726:	2200      	moveq	r2, #0
 8003728:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800372a:	4293      	cmp	r3, r2
 800372c:	d113      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d109      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d06e      	beq.n	8003834 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d069      	beq.n	8003830 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800375c:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003768:	4b50      	ldr	r3, [pc, #320]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0ad      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003778:	4b4c      	ldr	r3, [pc, #304]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a4b      	ldr	r2, [pc, #300]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800377e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003784:	f7fe f80a 	bl	800179c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe f806 	bl	800179c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e09a      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379e:	4b43      	ldr	r3, [pc, #268]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037aa:	4b40      	ldr	r3, [pc, #256]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	4b40      	ldr	r3, [pc, #256]	@ (80038b0 <HAL_RCC_OscConfig+0x784>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037ba:	3a01      	subs	r2, #1
 80037bc:	0112      	lsls	r2, r2, #4
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037c4:	0212      	lsls	r2, r2, #8
 80037c6:	4311      	orrs	r1, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037cc:	0852      	lsrs	r2, r2, #1
 80037ce:	3a01      	subs	r2, #1
 80037d0:	0552      	lsls	r2, r2, #21
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037d8:	0852      	lsrs	r2, r2, #1
 80037da:	3a01      	subs	r2, #1
 80037dc:	0652      	lsls	r2, r2, #25
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037e4:	0912      	lsrs	r2, r2, #4
 80037e6:	0452      	lsls	r2, r2, #17
 80037e8:	430a      	orrs	r2, r1
 80037ea:	4930      	ldr	r1, [pc, #192]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037f0:	4b2e      	ldr	r3, [pc, #184]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2d      	ldr	r2, [pc, #180]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037fc:	4b2b      	ldr	r3, [pc, #172]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a2a      	ldr	r2, [pc, #168]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003808:	f7fd ffc8 	bl	800179c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fd ffc4 	bl	800179c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e058      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800382e:	e050      	b.n	80038d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e04f      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003834:	4b1d      	ldr	r3, [pc, #116]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d148      	bne.n	80038d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003840:	4b1a      	ldr	r3, [pc, #104]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800384c:	4b17      	ldr	r3, [pc, #92]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a16      	ldr	r2, [pc, #88]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003858:	f7fd ffa0 	bl	800179c <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fd ff9c 	bl	800179c <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e030      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x734>
 800387e:	e028      	b.n	80038d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d023      	beq.n	80038ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800388c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7fd ff83 	bl	800179c <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003898:	e00c      	b.n	80038b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389a:	f7fd ff7f 	bl	800179c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d905      	bls.n	80038b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e013      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
 80038ac:	40021000 	.word	0x40021000
 80038b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b4:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCC_OscConfig+0x7b0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ec      	bne.n	800389a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_RCC_OscConfig+0x7b0>)
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	4905      	ldr	r1, [pc, #20]	@ (80038dc <HAL_RCC_OscConfig+0x7b0>)
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCC_OscConfig+0x7b4>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	60cb      	str	r3, [r1, #12]
 80038cc:	e001      	b.n	80038d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	feeefffc 	.word	0xfeeefffc

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0e7      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b75      	ldr	r3, [pc, #468]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b72      	ldr	r3, [pc, #456]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 0207 	bic.w	r2, r3, #7
 800390e:	4970      	ldr	r1, [pc, #448]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b6e      	ldr	r3, [pc, #440]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0cf      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	4b66      	ldr	r3, [pc, #408]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003940:	429a      	cmp	r2, r3
 8003942:	d908      	bls.n	8003956 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003944:	4b63      	ldr	r3, [pc, #396]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4960      	ldr	r1, [pc, #384]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d04c      	beq.n	80039fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d121      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e0a6      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003982:	4b54      	ldr	r3, [pc, #336]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d115      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e09a      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800399a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e08e      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039aa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e086      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4943      	ldr	r1, [pc, #268]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fd fee6 	bl	800179c <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fd fee2 	bl	800179c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e06e      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d208      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	492b      	ldr	r1, [pc, #172]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2a:	4b29      	ldr	r3, [pc, #164]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d210      	bcs.n	8003a5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a38:	4b25      	ldr	r3, [pc, #148]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 0207 	bic.w	r2, r3, #7
 8003a40:	4923      	ldr	r1, [pc, #140]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a48:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e036      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4918      	ldr	r1, [pc, #96]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a84:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4910      	ldr	r1, [pc, #64]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a98:	f000 f824 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	490b      	ldr	r1, [pc, #44]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1f4>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	4a09      	ldr	r2, [pc, #36]	@ (8003adc <HAL_RCC_ClockConfig+0x1f8>)
 8003ab6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1fc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fe1d 	bl	80016fc <HAL_InitTick>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	080068b0 	.word	0x080068b0
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	@ 0x24
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d121      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d11e      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b18:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b24:	4b31      	ldr	r3, [pc, #196]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e005      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b34:	4b2d      	ldr	r3, [pc, #180]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b40:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d102      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b5c:	4b25      	ldr	r3, [pc, #148]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e004      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b68:	4b23      	ldr	r3, [pc, #140]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d134      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b72:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d003      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0xac>
 8003b88:	e005      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b8c:	617b      	str	r3, [r7, #20]
      break;
 8003b8e:	e005      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b90:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b92:	617b      	str	r3, [r7, #20]
      break;
 8003b94:	e002      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	617b      	str	r3, [r7, #20]
      break;
 8003b9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b9c:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003baa:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	fb03 f202 	mul.w	r2, r3, r2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	0e5b      	lsrs	r3, r3, #25
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3724      	adds	r7, #36	@ 0x24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	080068c8 	.word	0x080068c8
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	007a1200 	.word	0x007a1200

08003bfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000000 	.word	0x20000000

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c18:	f7ff fff0 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4904      	ldr	r1, [pc, #16]	@ (8003c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	080068c0 	.word	0x080068c0

08003c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c44:	f7ff ffda 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0adb      	lsrs	r3, r3, #11
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4904      	ldr	r1, [pc, #16]	@ (8003c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	080068c0 	.word	0x080068c0

08003c6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c78:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c84:	f7ff f922 	bl	8002ecc <HAL_PWREx_GetVoltageRange>
 8003c88:	6178      	str	r0, [r7, #20]
 8003c8a:	e014      	b.n	8003cb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c90:	4a24      	ldr	r2, [pc, #144]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c98:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ca4:	f7ff f912 	bl	8002ecc <HAL_PWREx_GetVoltageRange>
 8003ca8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003caa:	4b1e      	ldr	r3, [pc, #120]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cae:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cbc:	d10b      	bne.n	8003cd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b80      	cmp	r3, #128	@ 0x80
 8003cc2:	d919      	bls.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cc8:	d902      	bls.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cca:	2302      	movs	r3, #2
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	e013      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	e010      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b80      	cmp	r3, #128	@ 0x80
 8003cda:	d902      	bls.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cdc:	2303      	movs	r3, #3
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e00a      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b80      	cmp	r3, #128	@ 0x80
 8003ce6:	d102      	bne.n	8003cee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ce8:	2302      	movs	r3, #2
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e004      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b70      	cmp	r3, #112	@ 0x70
 8003cf2:	d101      	bne.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 0207 	bic.w	r2, r3, #7
 8003d00:	4909      	ldr	r1, [pc, #36]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40022000 	.word	0x40022000

08003d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d34:	2300      	movs	r3, #0
 8003d36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d041      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d50:	d02a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d56:	d824      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d5c:	d008      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d62:	d81e      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d6c:	d010      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d6e:	e018      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d70:	4b86      	ldr	r3, [pc, #536]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a85      	ldr	r2, [pc, #532]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d7c:	e015      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 facb 	bl	8004320 <RCCEx_PLLSAI1_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8e:	e00c      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3320      	adds	r3, #32
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fbb6 	bl	8004508 <RCCEx_PLLSAI2_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003da0:	e003      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	74fb      	strb	r3, [r7, #19]
      break;
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db0:	4b76      	ldr	r3, [pc, #472]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dbe:	4973      	ldr	r1, [pc, #460]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003dc6:	e001      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d041      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ddc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003de0:	d02a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003de2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003de6:	d824      	bhi.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dec:	d008      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003df2:	d81e      	bhi.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dfc:	d010      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dfe:	e018      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e00:	4b62      	ldr	r3, [pc, #392]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a61      	ldr	r2, [pc, #388]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e0c:	e015      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fa83 	bl	8004320 <RCCEx_PLLSAI1_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e1e:	e00c      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3320      	adds	r3, #32
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fb6e 	bl	8004508 <RCCEx_PLLSAI2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e30:	e003      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	74fb      	strb	r3, [r7, #19]
      break;
 8003e36:	e000      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e40:	4b52      	ldr	r3, [pc, #328]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e4e:	494f      	ldr	r1, [pc, #316]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e56:	e001      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a0 	beq.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e6e:	4b47      	ldr	r3, [pc, #284]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00d      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e84:	4b41      	ldr	r3, [pc, #260]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e88:	4a40      	ldr	r2, [pc, #256]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e90:	4b3e      	ldr	r3, [pc, #248]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eac:	f7fd fc76 	bl	800179c <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eb2:	e009      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb4:	f7fd fc72 	bl	800179c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d902      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ec6:	e005      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec8:	4b31      	ldr	r3, [pc, #196]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ef      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d15c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eda:	4b2c      	ldr	r3, [pc, #176]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01f      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d019      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef8:	4b24      	ldr	r3, [pc, #144]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f04:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0a:	4a20      	ldr	r2, [pc, #128]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f14:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f24:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd fc31 	bl	800179c <HAL_GetTick>
 8003f3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3c:	e00b      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fd fc2d 	bl	800179c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d902      	bls.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	74fb      	strb	r3, [r7, #19]
            break;
 8003f54:	e006      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ec      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f64:	7cfb      	ldrb	r3, [r7, #19]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f6a:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f7a:	4904      	ldr	r1, [pc, #16]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f82:	e009      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	74bb      	strb	r3, [r7, #18]
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f98:	7c7b      	ldrb	r3, [r7, #17]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	4a9d      	ldr	r2, [pc, #628]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb6:	4b98      	ldr	r3, [pc, #608]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f023 0203 	bic.w	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc4:	4994      	ldr	r1, [pc, #592]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	f023 020c 	bic.w	r2, r3, #12
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	498c      	ldr	r1, [pc, #560]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ffa:	4b87      	ldr	r3, [pc, #540]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	4983      	ldr	r1, [pc, #524]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800401c:	4b7e      	ldr	r3, [pc, #504]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	497b      	ldr	r1, [pc, #492]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800403e:	4b76      	ldr	r3, [pc, #472]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404c:	4972      	ldr	r1, [pc, #456]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004060:	4b6d      	ldr	r3, [pc, #436]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004066:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406e:	496a      	ldr	r1, [pc, #424]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004082:	4b65      	ldr	r3, [pc, #404]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004088:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	4961      	ldr	r1, [pc, #388]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b2:	4959      	ldr	r1, [pc, #356]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c6:	4b54      	ldr	r3, [pc, #336]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d4:	4950      	ldr	r1, [pc, #320]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f6:	4948      	ldr	r1, [pc, #288]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800410a:	4b43      	ldr	r3, [pc, #268]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004118:	493f      	ldr	r1, [pc, #252]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d028      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800412c:	4b3a      	ldr	r3, [pc, #232]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004132:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413a:	4937      	ldr	r1, [pc, #220]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800414a:	d106      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800414c:	4b32      	ldr	r3, [pc, #200]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a31      	ldr	r2, [pc, #196]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004156:	60d3      	str	r3, [r2, #12]
 8004158:	e011      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800415e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004162:	d10c      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	2101      	movs	r1, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f8d8 	bl	8004320 <RCCEx_PLLSAI1_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d028      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800418a:	4b23      	ldr	r3, [pc, #140]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004190:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004198:	491f      	ldr	r1, [pc, #124]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041a8:	d106      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041b4:	60d3      	str	r3, [r2, #12]
 80041b6:	e011      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	2101      	movs	r1, #1
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f8a9 	bl	8004320 <RCCEx_PLLSAI1_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02b      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f6:	4908      	ldr	r1, [pc, #32]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004206:	d109      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004208:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a02      	ldr	r2, [pc, #8]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004212:	60d3      	str	r3, [r2, #12]
 8004214:	e014      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004220:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004224:	d10c      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f877 	bl	8004320 <RCCEx_PLLSAI1_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800424c:	4b2b      	ldr	r3, [pc, #172]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800425a:	4928      	ldr	r1, [pc, #160]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800426a:	d10d      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	2102      	movs	r1, #2
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f854 	bl	8004320 <RCCEx_PLLSAI1_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d014      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	74bb      	strb	r3, [r7, #18]
 8004286:	e011      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800428c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004290:	d10c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3320      	adds	r3, #32
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f935 	bl	8004508 <RCCEx_PLLSAI2_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042b8:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c6:	490d      	ldr	r1, [pc, #52]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042da:	4b08      	ldr	r3, [pc, #32]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ea:	4904      	ldr	r1, [pc, #16]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000

08004300 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a04      	ldr	r2, [pc, #16]	@ (800431c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	6013      	str	r3, [r2, #0]
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000

08004320 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800432e:	4b75      	ldr	r3, [pc, #468]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800433a:	4b72      	ldr	r3, [pc, #456]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0203 	and.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d10d      	bne.n	8004366 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
       ||
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004352:	4b6c      	ldr	r3, [pc, #432]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
       ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d047      	beq.n	80043f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	e044      	b.n	80043f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d018      	beq.n	80043a6 <RCCEx_PLLSAI1_Config+0x86>
 8004374:	2b03      	cmp	r3, #3
 8004376:	d825      	bhi.n	80043c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004378:	2b01      	cmp	r3, #1
 800437a:	d002      	beq.n	8004382 <RCCEx_PLLSAI1_Config+0x62>
 800437c:	2b02      	cmp	r3, #2
 800437e:	d009      	beq.n	8004394 <RCCEx_PLLSAI1_Config+0x74>
 8004380:	e020      	b.n	80043c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004382:	4b60      	ldr	r3, [pc, #384]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11d      	bne.n	80043ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004392:	e01a      	b.n	80043ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004394:	4b5b      	ldr	r3, [pc, #364]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800439c:	2b00      	cmp	r3, #0
 800439e:	d116      	bne.n	80043ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a4:	e013      	b.n	80043ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043a6:	4b57      	ldr	r3, [pc, #348]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043b2:	4b54      	ldr	r3, [pc, #336]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043c2:	e006      	b.n	80043d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      break;
 80043c8:	e004      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ca:	bf00      	nop
 80043cc:	e002      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10d      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043da:	4b4a      	ldr	r3, [pc, #296]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6819      	ldr	r1, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	430b      	orrs	r3, r1
 80043f0:	4944      	ldr	r1, [pc, #272]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d17d      	bne.n	80044f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043fc:	4b41      	ldr	r3, [pc, #260]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a40      	ldr	r2, [pc, #256]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004408:	f7fd f9c8 	bl	800179c <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800440e:	e009      	b.n	8004424 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004410:	f7fd f9c4 	bl	800179c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d902      	bls.n	8004424 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	73fb      	strb	r3, [r7, #15]
        break;
 8004422:	e005      	b.n	8004430 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004424:	4b37      	ldr	r3, [pc, #220]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ef      	bne.n	8004410 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d160      	bne.n	80044f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d111      	bne.n	8004460 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800443c:	4b31      	ldr	r3, [pc, #196]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6892      	ldr	r2, [r2, #8]
 800444c:	0211      	lsls	r1, r2, #8
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68d2      	ldr	r2, [r2, #12]
 8004452:	0912      	lsrs	r2, r2, #4
 8004454:	0452      	lsls	r2, r2, #17
 8004456:	430a      	orrs	r2, r1
 8004458:	492a      	ldr	r1, [pc, #168]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	610b      	str	r3, [r1, #16]
 800445e:	e027      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d112      	bne.n	800448c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004466:	4b27      	ldr	r3, [pc, #156]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800446e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6892      	ldr	r2, [r2, #8]
 8004476:	0211      	lsls	r1, r2, #8
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6912      	ldr	r2, [r2, #16]
 800447c:	0852      	lsrs	r2, r2, #1
 800447e:	3a01      	subs	r2, #1
 8004480:	0552      	lsls	r2, r2, #21
 8004482:	430a      	orrs	r2, r1
 8004484:	491f      	ldr	r1, [pc, #124]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004486:	4313      	orrs	r3, r2
 8004488:	610b      	str	r3, [r1, #16]
 800448a:	e011      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800448c:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004494:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6892      	ldr	r2, [r2, #8]
 800449c:	0211      	lsls	r1, r2, #8
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6952      	ldr	r2, [r2, #20]
 80044a2:	0852      	lsrs	r2, r2, #1
 80044a4:	3a01      	subs	r2, #1
 80044a6:	0652      	lsls	r2, r2, #25
 80044a8:	430a      	orrs	r2, r1
 80044aa:	4916      	ldr	r1, [pc, #88]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044b0:	4b14      	ldr	r3, [pc, #80]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a13      	ldr	r2, [pc, #76]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fd f96e 	bl	800179c <HAL_GetTick>
 80044c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044c2:	e009      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c4:	f7fd f96a 	bl	800179c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d902      	bls.n	80044d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	73fb      	strb	r3, [r7, #15]
          break;
 80044d6:	e005      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0ef      	beq.n	80044c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044ea:	4b06      	ldr	r3, [pc, #24]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4904      	ldr	r1, [pc, #16]	@ (8004504 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000

08004508 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004516:	4b6a      	ldr	r3, [pc, #424]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004522:	4b67      	ldr	r3, [pc, #412]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0203 	and.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d10d      	bne.n	800454e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
       ||
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800453a:	4b61      	ldr	r3, [pc, #388]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
       ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d047      	beq.n	80045de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	e044      	b.n	80045de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d018      	beq.n	800458e <RCCEx_PLLSAI2_Config+0x86>
 800455c:	2b03      	cmp	r3, #3
 800455e:	d825      	bhi.n	80045ac <RCCEx_PLLSAI2_Config+0xa4>
 8004560:	2b01      	cmp	r3, #1
 8004562:	d002      	beq.n	800456a <RCCEx_PLLSAI2_Config+0x62>
 8004564:	2b02      	cmp	r3, #2
 8004566:	d009      	beq.n	800457c <RCCEx_PLLSAI2_Config+0x74>
 8004568:	e020      	b.n	80045ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800456a:	4b55      	ldr	r3, [pc, #340]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d11d      	bne.n	80045b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457a:	e01a      	b.n	80045b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800457c:	4b50      	ldr	r3, [pc, #320]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004584:	2b00      	cmp	r3, #0
 8004586:	d116      	bne.n	80045b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800458c:	e013      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800458e:	4b4c      	ldr	r3, [pc, #304]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800459a:	4b49      	ldr	r3, [pc, #292]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045aa:	e006      	b.n	80045ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      break;
 80045b0:	e004      	b.n	80045bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045b2:	bf00      	nop
 80045b4:	e002      	b.n	80045bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10d      	bne.n	80045de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045c2:	4b3f      	ldr	r3, [pc, #252]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	430b      	orrs	r3, r1
 80045d8:	4939      	ldr	r1, [pc, #228]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d167      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045e4:	4b36      	ldr	r3, [pc, #216]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a35      	ldr	r2, [pc, #212]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f0:	f7fd f8d4 	bl	800179c <HAL_GetTick>
 80045f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045f6:	e009      	b.n	800460c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045f8:	f7fd f8d0 	bl	800179c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d902      	bls.n	800460c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	73fb      	strb	r3, [r7, #15]
        break;
 800460a:	e005      	b.n	8004618 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800460c:	4b2c      	ldr	r3, [pc, #176]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ef      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d14a      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004624:	4b26      	ldr	r3, [pc, #152]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800462c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6892      	ldr	r2, [r2, #8]
 8004634:	0211      	lsls	r1, r2, #8
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68d2      	ldr	r2, [r2, #12]
 800463a:	0912      	lsrs	r2, r2, #4
 800463c:	0452      	lsls	r2, r2, #17
 800463e:	430a      	orrs	r2, r1
 8004640:	491f      	ldr	r1, [pc, #124]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	614b      	str	r3, [r1, #20]
 8004646:	e011      	b.n	800466c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004648:	4b1d      	ldr	r3, [pc, #116]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004650:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6892      	ldr	r2, [r2, #8]
 8004658:	0211      	lsls	r1, r2, #8
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6912      	ldr	r2, [r2, #16]
 800465e:	0852      	lsrs	r2, r2, #1
 8004660:	3a01      	subs	r2, #1
 8004662:	0652      	lsls	r2, r2, #25
 8004664:	430a      	orrs	r2, r1
 8004666:	4916      	ldr	r1, [pc, #88]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800466c:	4b14      	ldr	r3, [pc, #80]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a13      	ldr	r2, [pc, #76]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004676:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd f890 	bl	800179c <HAL_GetTick>
 800467c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800467e:	e009      	b.n	8004694 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004680:	f7fd f88c 	bl	800179c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d902      	bls.n	8004694 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	73fb      	strb	r3, [r7, #15]
          break;
 8004692:	e005      	b.n	80046a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004694:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ef      	beq.n	8004680 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046a6:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4904      	ldr	r1, [pc, #16]	@ (80046c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000

080046c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e095      	b.n	8004802 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046e6:	d009      	beq.n	80046fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	61da      	str	r2, [r3, #28]
 80046ee:	e005      	b.n	80046fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc fd3c 	bl	8001194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004732:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800473c:	d902      	bls.n	8004744 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	e002      	b.n	800474a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004748:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004752:	d007      	beq.n	8004764 <HAL_SPI_Init+0xa0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800475c:	d002      	beq.n	8004764 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a6:	ea42 0103 	orr.w	r1, r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	0c1b      	lsrs	r3, r3, #16
 80047c0:	f003 0204 	and.w	r2, r3, #4
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047e0:	ea42 0103 	orr.w	r1, r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e040      	b.n	800489e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fc fcf5 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2224      	movs	r2, #36	@ 0x24
 8004836:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb69 	bl	8004f28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8ae 	bl	80049b8 <UART_SetConfig>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e01b      	b.n	800489e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004874:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004884:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0201 	orr.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fbe8 	bl	800506c <UART_CheckIdleState>
 800489c:	4603      	mov	r3, r0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b08a      	sub	sp, #40	@ 0x28
 80048aa:	af02      	add	r7, sp, #8
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d177      	bne.n	80049ae <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_UART_Transmit+0x24>
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e070      	b.n	80049b0 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2221      	movs	r2, #33	@ 0x21
 80048da:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048dc:	f7fc ff5e 	bl	800179c <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048fa:	d108      	bne.n	800490e <HAL_UART_Transmit+0x68>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	e003      	b.n	8004916 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004916:	e02f      	b.n	8004978 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2200      	movs	r2, #0
 8004920:	2180      	movs	r1, #128	@ 0x80
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fc4a 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e03b      	b.n	80049b0 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494a:	b292      	uxth	r2, r2
 800494c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	3302      	adds	r3, #2
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e007      	b.n	8004966 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3301      	adds	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1c9      	bne.n	8004918 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2200      	movs	r2, #0
 800498c:	2140      	movs	r1, #64	@ 0x40
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fc14 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e005      	b.n	80049b0 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e000      	b.n	80049b0 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80049ae:	2302      	movs	r3, #2
  }
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049bc:	b08a      	sub	sp, #40	@ 0x28
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4313      	orrs	r3, r2
 80049de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4ba4      	ldr	r3, [pc, #656]	@ (8004c78 <UART_SetConfig+0x2c0>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a99      	ldr	r2, [pc, #612]	@ (8004c7c <UART_SetConfig+0x2c4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a20:	4313      	orrs	r3, r2
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a90      	ldr	r2, [pc, #576]	@ (8004c80 <UART_SetConfig+0x2c8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d126      	bne.n	8004a90 <UART_SetConfig+0xd8>
 8004a42:	4b90      	ldr	r3, [pc, #576]	@ (8004c84 <UART_SetConfig+0x2cc>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d81b      	bhi.n	8004a88 <UART_SetConfig+0xd0>
 8004a50:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <UART_SetConfig+0xa0>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a69 	.word	0x08004a69
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e116      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004a70:	2302      	movs	r3, #2
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a76:	e112      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7e:	e10e      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004a80:	2308      	movs	r3, #8
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a86:	e10a      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8e:	e106      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a7c      	ldr	r2, [pc, #496]	@ (8004c88 <UART_SetConfig+0x2d0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d138      	bne.n	8004b0c <UART_SetConfig+0x154>
 8004a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004c84 <UART_SetConfig+0x2cc>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d82d      	bhi.n	8004b04 <UART_SetConfig+0x14c>
 8004aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <UART_SetConfig+0xf8>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ae5 	.word	0x08004ae5
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004b05 	.word	0x08004b05
 8004abc:	08004b05 	.word	0x08004b05
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004b05 	.word	0x08004b05
 8004ac8:	08004b05 	.word	0x08004b05
 8004acc:	08004b05 	.word	0x08004b05
 8004ad0:	08004aed 	.word	0x08004aed
 8004ad4:	08004b05 	.word	0x08004b05
 8004ad8:	08004b05 	.word	0x08004b05
 8004adc:	08004b05 	.word	0x08004b05
 8004ae0:	08004afd 	.word	0x08004afd
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aea:	e0d8      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004aec:	2302      	movs	r3, #2
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af2:	e0d4      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004af4:	2304      	movs	r3, #4
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afa:	e0d0      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004afc:	2308      	movs	r3, #8
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b02:	e0cc      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0a:	e0c8      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5e      	ldr	r2, [pc, #376]	@ (8004c8c <UART_SetConfig+0x2d4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d125      	bne.n	8004b62 <UART_SetConfig+0x1aa>
 8004b16:	4b5b      	ldr	r3, [pc, #364]	@ (8004c84 <UART_SetConfig+0x2cc>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b20:	2b30      	cmp	r3, #48	@ 0x30
 8004b22:	d016      	beq.n	8004b52 <UART_SetConfig+0x19a>
 8004b24:	2b30      	cmp	r3, #48	@ 0x30
 8004b26:	d818      	bhi.n	8004b5a <UART_SetConfig+0x1a2>
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d00a      	beq.n	8004b42 <UART_SetConfig+0x18a>
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d814      	bhi.n	8004b5a <UART_SetConfig+0x1a2>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <UART_SetConfig+0x182>
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d008      	beq.n	8004b4a <UART_SetConfig+0x192>
 8004b38:	e00f      	b.n	8004b5a <UART_SetConfig+0x1a2>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b40:	e0ad      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004b42:	2302      	movs	r3, #2
 8004b44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b48:	e0a9      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b50:	e0a5      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004b52:	2308      	movs	r3, #8
 8004b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b58:	e0a1      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b60:	e09d      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4a      	ldr	r2, [pc, #296]	@ (8004c90 <UART_SetConfig+0x2d8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d125      	bne.n	8004bb8 <UART_SetConfig+0x200>
 8004b6c:	4b45      	ldr	r3, [pc, #276]	@ (8004c84 <UART_SetConfig+0x2cc>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b78:	d016      	beq.n	8004ba8 <UART_SetConfig+0x1f0>
 8004b7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b7c:	d818      	bhi.n	8004bb0 <UART_SetConfig+0x1f8>
 8004b7e:	2b80      	cmp	r3, #128	@ 0x80
 8004b80:	d00a      	beq.n	8004b98 <UART_SetConfig+0x1e0>
 8004b82:	2b80      	cmp	r3, #128	@ 0x80
 8004b84:	d814      	bhi.n	8004bb0 <UART_SetConfig+0x1f8>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <UART_SetConfig+0x1d8>
 8004b8a:	2b40      	cmp	r3, #64	@ 0x40
 8004b8c:	d008      	beq.n	8004ba0 <UART_SetConfig+0x1e8>
 8004b8e:	e00f      	b.n	8004bb0 <UART_SetConfig+0x1f8>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e082      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e07e      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e07a      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bae:	e076      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb6:	e072      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a35      	ldr	r2, [pc, #212]	@ (8004c94 <UART_SetConfig+0x2dc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d12a      	bne.n	8004c18 <UART_SetConfig+0x260>
 8004bc2:	4b30      	ldr	r3, [pc, #192]	@ (8004c84 <UART_SetConfig+0x2cc>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bd0:	d01a      	beq.n	8004c08 <UART_SetConfig+0x250>
 8004bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bd6:	d81b      	bhi.n	8004c10 <UART_SetConfig+0x258>
 8004bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bdc:	d00c      	beq.n	8004bf8 <UART_SetConfig+0x240>
 8004bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be2:	d815      	bhi.n	8004c10 <UART_SetConfig+0x258>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <UART_SetConfig+0x238>
 8004be8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bec:	d008      	beq.n	8004c00 <UART_SetConfig+0x248>
 8004bee:	e00f      	b.n	8004c10 <UART_SetConfig+0x258>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf6:	e052      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfe:	e04e      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c00:	2304      	movs	r3, #4
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c06:	e04a      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0e:	e046      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c16:	e042      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a17      	ldr	r2, [pc, #92]	@ (8004c7c <UART_SetConfig+0x2c4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d13a      	bne.n	8004c98 <UART_SetConfig+0x2e0>
 8004c22:	4b18      	ldr	r3, [pc, #96]	@ (8004c84 <UART_SetConfig+0x2cc>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c30:	d01a      	beq.n	8004c68 <UART_SetConfig+0x2b0>
 8004c32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c36:	d81b      	bhi.n	8004c70 <UART_SetConfig+0x2b8>
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c3c:	d00c      	beq.n	8004c58 <UART_SetConfig+0x2a0>
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c42:	d815      	bhi.n	8004c70 <UART_SetConfig+0x2b8>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <UART_SetConfig+0x298>
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4c:	d008      	beq.n	8004c60 <UART_SetConfig+0x2a8>
 8004c4e:	e00f      	b.n	8004c70 <UART_SetConfig+0x2b8>
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c56:	e022      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5e:	e01e      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c66:	e01a      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6e:	e016      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c76:	e012      	b.n	8004c9e <UART_SetConfig+0x2e6>
 8004c78:	efff69f3 	.word	0xefff69f3
 8004c7c:	40008000 	.word	0x40008000
 8004c80:	40013800 	.word	0x40013800
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40004400 	.word	0x40004400
 8004c8c:	40004800 	.word	0x40004800
 8004c90:	40004c00 	.word	0x40004c00
 8004c94:	40005000 	.word	0x40005000
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a9f      	ldr	r2, [pc, #636]	@ (8004f20 <UART_SetConfig+0x568>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d17a      	bne.n	8004d9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d824      	bhi.n	8004cfa <UART_SetConfig+0x342>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <UART_SetConfig+0x300>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cfb 	.word	0x08004cfb
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004cfb 	.word	0x08004cfb
 8004cc8:	08004ceb 	.word	0x08004ceb
 8004ccc:	08004cfb 	.word	0x08004cfb
 8004cd0:	08004cfb 	.word	0x08004cfb
 8004cd4:	08004cfb 	.word	0x08004cfb
 8004cd8:	08004cf3 	.word	0x08004cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7fe ff9a 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	61f8      	str	r0, [r7, #28]
        break;
 8004ce2:	e010      	b.n	8004d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8004f24 <UART_SetConfig+0x56c>)
 8004ce6:	61fb      	str	r3, [r7, #28]
        break;
 8004ce8:	e00d      	b.n	8004d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cea:	f7fe fefb 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8004cee:	61f8      	str	r0, [r7, #28]
        break;
 8004cf0:	e009      	b.n	8004d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cf6:	61fb      	str	r3, [r7, #28]
        break;
 8004cf8:	e005      	b.n	8004d06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80fb 	beq.w	8004f04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	4413      	add	r3, r2
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d305      	bcc.n	8004d2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d903      	bls.n	8004d32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d30:	e0e8      	b.n	8004f04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2200      	movs	r2, #0
 8004d36:	461c      	mov	r4, r3
 8004d38:	4615      	mov	r5, r2
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	022b      	lsls	r3, r5, #8
 8004d44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d48:	0222      	lsls	r2, r4, #8
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	6849      	ldr	r1, [r1, #4]
 8004d4e:	0849      	lsrs	r1, r1, #1
 8004d50:	2000      	movs	r0, #0
 8004d52:	4688      	mov	r8, r1
 8004d54:	4681      	mov	r9, r0
 8004d56:	eb12 0a08 	adds.w	sl, r2, r8
 8004d5a:	eb43 0b09 	adc.w	fp, r3, r9
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d6c:	4650      	mov	r0, sl
 8004d6e:	4659      	mov	r1, fp
 8004d70:	f7fb fa7e 	bl	8000270 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4613      	mov	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d82:	d308      	bcc.n	8004d96 <UART_SetConfig+0x3de>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8a:	d204      	bcs.n	8004d96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	60da      	str	r2, [r3, #12]
 8004d94:	e0b6      	b.n	8004f04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d9c:	e0b2      	b.n	8004f04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004da6:	d15e      	bne.n	8004e66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004da8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d828      	bhi.n	8004e02 <UART_SetConfig+0x44a>
 8004db0:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <UART_SetConfig+0x400>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004ded 	.word	0x08004ded
 8004dc4:	08004e03 	.word	0x08004e03
 8004dc8:	08004df3 	.word	0x08004df3
 8004dcc:	08004e03 	.word	0x08004e03
 8004dd0:	08004e03 	.word	0x08004e03
 8004dd4:	08004e03 	.word	0x08004e03
 8004dd8:	08004dfb 	.word	0x08004dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7fe ff1a 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8004de0:	61f8      	str	r0, [r7, #28]
        break;
 8004de2:	e014      	b.n	8004e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de4:	f7fe ff2c 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8004de8:	61f8      	str	r0, [r7, #28]
        break;
 8004dea:	e010      	b.n	8004e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dec:	4b4d      	ldr	r3, [pc, #308]	@ (8004f24 <UART_SetConfig+0x56c>)
 8004dee:	61fb      	str	r3, [r7, #28]
        break;
 8004df0:	e00d      	b.n	8004e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df2:	f7fe fe77 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8004df6:	61f8      	str	r0, [r7, #28]
        break;
 8004df8:	e009      	b.n	8004e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dfe:	61fb      	str	r3, [r7, #28]
        break;
 8004e00:	e005      	b.n	8004e0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d077      	beq.n	8004f04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	005a      	lsls	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	441a      	add	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b0f      	cmp	r3, #15
 8004e2e:	d916      	bls.n	8004e5e <UART_SetConfig+0x4a6>
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e36:	d212      	bcs.n	8004e5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f023 030f 	bic.w	r3, r3, #15
 8004e40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	8afb      	ldrh	r3, [r7, #22]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	8afa      	ldrh	r2, [r7, #22]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	e052      	b.n	8004f04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e64:	e04e      	b.n	8004f04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d827      	bhi.n	8004ebe <UART_SetConfig+0x506>
 8004e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <UART_SetConfig+0x4bc>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08004ea1 	.word	0x08004ea1
 8004e7c:	08004ea9 	.word	0x08004ea9
 8004e80:	08004ebf 	.word	0x08004ebf
 8004e84:	08004eaf 	.word	0x08004eaf
 8004e88:	08004ebf 	.word	0x08004ebf
 8004e8c:	08004ebf 	.word	0x08004ebf
 8004e90:	08004ebf 	.word	0x08004ebf
 8004e94:	08004eb7 	.word	0x08004eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e98:	f7fe febc 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8004e9c:	61f8      	str	r0, [r7, #28]
        break;
 8004e9e:	e014      	b.n	8004eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7fe fece 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8004ea4:	61f8      	str	r0, [r7, #28]
        break;
 8004ea6:	e010      	b.n	8004eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f24 <UART_SetConfig+0x56c>)
 8004eaa:	61fb      	str	r3, [r7, #28]
        break;
 8004eac:	e00d      	b.n	8004eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7fe fe19 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8004eb2:	61f8      	str	r0, [r7, #28]
        break;
 8004eb4:	e009      	b.n	8004eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eba:	61fb      	str	r3, [r7, #28]
        break;
 8004ebc:	e005      	b.n	8004eca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ec8:	bf00      	nop
    }

    if (pclk != 0U)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d019      	beq.n	8004f04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	085a      	lsrs	r2, r3, #1
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	441a      	add	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d909      	bls.n	8004efe <UART_SetConfig+0x546>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef0:	d205      	bcs.n	8004efe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	e002      	b.n	8004f04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3728      	adds	r7, #40	@ 0x28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1e:	bf00      	nop
 8004f20:	40008000 	.word	0x40008000
 8004f24:	00f42400 	.word	0x00f42400

08004f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01a      	beq.n	800503e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005026:	d10a      	bne.n	800503e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b098      	sub	sp, #96	@ 0x60
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800507c:	f7fc fb8e 	bl	800179c <HAL_GetTick>
 8005080:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b08      	cmp	r3, #8
 800508e:	d12e      	bne.n	80050ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005090:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005098:	2200      	movs	r2, #0
 800509a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f88c 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d021      	beq.n	80050ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050be:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e062      	b.n	80051b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d149      	bne.n	8005190 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005104:	2200      	movs	r2, #0
 8005106:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f856 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03c      	beq.n	8005190 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	623b      	str	r3, [r7, #32]
   return(result);
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800512a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005134:	633b      	str	r3, [r7, #48]	@ 0x30
 8005136:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800513a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e6      	bne.n	8005116 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3308      	adds	r3, #8
 800514e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	60fb      	str	r3, [r7, #12]
   return(result);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005168:	61fa      	str	r2, [r7, #28]
 800516a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	617b      	str	r3, [r7, #20]
   return(result);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e5      	bne.n	8005148 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e011      	b.n	80051b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3758      	adds	r7, #88	@ 0x58
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	e04f      	b.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d04b      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fc fae1 	bl	800179c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <UART_WaitOnFlagUntilTimeout+0x30>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e04e      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d037      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b80      	cmp	r3, #128	@ 0x80
 8005202:	d034      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b40      	cmp	r3, #64	@ 0x40
 8005208:	d031      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d110      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2208      	movs	r2, #8
 800521e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f838 	bl	8005296 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2208      	movs	r2, #8
 800522a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e029      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005248:	d111      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f81e 	bl	8005296 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e00f      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4013      	ands	r3, r2
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	429a      	cmp	r2, r3
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	429a      	cmp	r2, r3
 800528a:	d0a0      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005296:	b480      	push	{r7}
 8005298:	b095      	sub	sp, #84	@ 0x54
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80052be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e6      	bne.n	800529e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3308      	adds	r3, #8
 80052d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	61fb      	str	r3, [r7, #28]
   return(result);
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3308      	adds	r3, #8
 80052ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e5      	bne.n	80052d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005308:	2b01      	cmp	r3, #1
 800530a:	d118      	bne.n	800533e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	60bb      	str	r3, [r7, #8]
   return(result);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f023 0310 	bic.w	r3, r3, #16
 8005320:	647b      	str	r3, [r7, #68]	@ 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	613b      	str	r3, [r7, #16]
   return(result);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e6      	bne.n	800530c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005352:	bf00      	nop
 8005354:	3754      	adds	r7, #84	@ 0x54
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800535e:	b084      	sub	sp, #16
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	f107 001c 	add.w	r0, r7, #28
 800536c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa69 	bl	8005854 <USB_CoreReset>
 8005382:	4603      	mov	r3, r0
 8005384:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005386:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005392:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	639a      	str	r2, [r3, #56]	@ 0x38
 800539a:	e005      	b.n	80053a8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053b4:	b004      	add	sp, #16
 80053b6:	4770      	bx	lr

080053b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f023 0201 	bic.w	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d115      	bne.n	8005428 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005408:	200a      	movs	r0, #10
 800540a:	f7fc f9d3 	bl	80017b4 <HAL_Delay>
      ms += 10U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	330a      	adds	r3, #10
 8005412:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa0f 	bl	8005838 <USB_GetMode>
 800541a:	4603      	mov	r3, r0
 800541c:	2b01      	cmp	r3, #1
 800541e:	d01e      	beq.n	800545e <USB_SetCurrentMode+0x84>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2bc7      	cmp	r3, #199	@ 0xc7
 8005424:	d9f0      	bls.n	8005408 <USB_SetCurrentMode+0x2e>
 8005426:	e01a      	b.n	800545e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d115      	bne.n	800545a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800543a:	200a      	movs	r0, #10
 800543c:	f7fc f9ba 	bl	80017b4 <HAL_Delay>
      ms += 10U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	330a      	adds	r3, #10
 8005444:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f9f6 	bl	8005838 <USB_GetMode>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <USB_SetCurrentMode+0x84>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2bc7      	cmp	r3, #199	@ 0xc7
 8005456:	d9f0      	bls.n	800543a <USB_SetCurrentMode+0x60>
 8005458:	e001      	b.n	800545e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e005      	b.n	800546a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2bc8      	cmp	r3, #200	@ 0xc8
 8005462:	d101      	bne.n	8005468 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005474:	b084      	sub	sp, #16
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	e009      	b.n	80054a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3340      	adds	r3, #64	@ 0x40
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3301      	adds	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b0e      	cmp	r3, #14
 80054ac:	d9f2      	bls.n	8005494 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11c      	bne.n	80054f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054c4:	f043 0302 	orr.w	r3, r3, #2
 80054c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e005      	b.n	80054fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005502:	461a      	mov	r2, r3
 8005504:	2300      	movs	r3, #0
 8005506:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005508:	2103      	movs	r1, #3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f95a 	bl	80057c4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005510:	2110      	movs	r1, #16
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f8f6 	bl	8005704 <USB_FlushTxFifo>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f920 	bl	8005768 <USB_FlushRxFifo>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005538:	461a      	mov	r2, r3
 800553a:	2300      	movs	r3, #0
 800553c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005544:	461a      	mov	r2, r3
 8005546:	2300      	movs	r3, #0
 8005548:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005550:	461a      	mov	r2, r3
 8005552:	2300      	movs	r3, #0
 8005554:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	e043      	b.n	80055e4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800556e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005572:	d118      	bne.n	80055a6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005586:	461a      	mov	r2, r3
 8005588:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e013      	b.n	80055b8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e008      	b.n	80055b8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b2:	461a      	mov	r2, r3
 80055b4:	2300      	movs	r3, #0
 80055b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c4:	461a      	mov	r2, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d6:	461a      	mov	r2, r3
 80055d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	3301      	adds	r3, #1
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055e8:	461a      	mov	r2, r3
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d3b5      	bcc.n	800555c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	e043      	b.n	800567e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800560c:	d118      	bne.n	8005640 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005620:	461a      	mov	r2, r3
 8005622:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e013      	b.n	8005652 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005636:	461a      	mov	r2, r3
 8005638:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e008      	b.n	8005652 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564c:	461a      	mov	r2, r3
 800564e:	2300      	movs	r3, #0
 8005650:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005676:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3301      	adds	r3, #1
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005682:	461a      	mov	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4293      	cmp	r3, r2
 8005688:	d3b5      	bcc.n	80055f6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800569c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80056aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f043 0210 	orr.w	r2, r3, #16
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	4b10      	ldr	r3, [pc, #64]	@ (8005700 <USB_DevInit+0x28c>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f043 0208 	orr.w	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d107      	bne.n	80056f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056e8:	f043 0304 	orr.w	r3, r3, #4
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056fc:	b004      	add	sp, #16
 80056fe:	4770      	bx	lr
 8005700:	803c3800 	.word	0x803c3800

08005704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800571e:	d901      	bls.n	8005724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e01b      	b.n	800575c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	daf2      	bge.n	8005712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	019b      	lsls	r3, r3, #6
 8005734:	f043 0220 	orr.w	r2, r3, #32
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005748:	d901      	bls.n	800574e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e006      	b.n	800575c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b20      	cmp	r3, #32
 8005758:	d0f0      	beq.n	800573c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005780:	d901      	bls.n	8005786 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e018      	b.n	80057b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	daf2      	bge.n	8005774 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2210      	movs	r2, #16
 8005796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057a4:	d901      	bls.n	80057aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e006      	b.n	80057b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d0f0      	beq.n	8005798 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057e4:	4313      	orrs	r3, r2
 80057e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005810:	f023 0303 	bic.w	r3, r3, #3
 8005814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005824:	f043 0302 	orr.w	r3, r3, #2
 8005828:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f003 0301 	and.w	r3, r3, #1
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800586c:	d901      	bls.n	8005872 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e01b      	b.n	80058aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	daf2      	bge.n	8005860 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f043 0201 	orr.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3301      	adds	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005896:	d901      	bls.n	800589c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e006      	b.n	80058aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d0f0      	beq.n	800588a <USB_CoreReset+0x36>

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <std>:
 80058b8:	2300      	movs	r3, #0
 80058ba:	b510      	push	{r4, lr}
 80058bc:	4604      	mov	r4, r0
 80058be:	e9c0 3300 	strd	r3, r3, [r0]
 80058c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058c6:	6083      	str	r3, [r0, #8]
 80058c8:	8181      	strh	r1, [r0, #12]
 80058ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80058cc:	81c2      	strh	r2, [r0, #14]
 80058ce:	6183      	str	r3, [r0, #24]
 80058d0:	4619      	mov	r1, r3
 80058d2:	2208      	movs	r2, #8
 80058d4:	305c      	adds	r0, #92	@ 0x5c
 80058d6:	f000 f9f9 	bl	8005ccc <memset>
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <std+0x58>)
 80058dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <std+0x5c>)
 80058e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <std+0x60>)
 80058e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <std+0x64>)
 80058e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005920 <std+0x68>)
 80058ec:	6224      	str	r4, [r4, #32]
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d006      	beq.n	8005900 <std+0x48>
 80058f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058f6:	4294      	cmp	r4, r2
 80058f8:	d002      	beq.n	8005900 <std+0x48>
 80058fa:	33d0      	adds	r3, #208	@ 0xd0
 80058fc:	429c      	cmp	r4, r3
 80058fe:	d105      	bne.n	800590c <std+0x54>
 8005900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005908:	f000 ba58 	b.w	8005dbc <__retarget_lock_init_recursive>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	bf00      	nop
 8005910:	08005b1d 	.word	0x08005b1d
 8005914:	08005b3f 	.word	0x08005b3f
 8005918:	08005b77 	.word	0x08005b77
 800591c:	08005b9b 	.word	0x08005b9b
 8005920:	200007dc 	.word	0x200007dc

08005924 <stdio_exit_handler>:
 8005924:	4a02      	ldr	r2, [pc, #8]	@ (8005930 <stdio_exit_handler+0xc>)
 8005926:	4903      	ldr	r1, [pc, #12]	@ (8005934 <stdio_exit_handler+0x10>)
 8005928:	4803      	ldr	r0, [pc, #12]	@ (8005938 <stdio_exit_handler+0x14>)
 800592a:	f000 b869 	b.w	8005a00 <_fwalk_sglue>
 800592e:	bf00      	nop
 8005930:	2000000c 	.word	0x2000000c
 8005934:	08006659 	.word	0x08006659
 8005938:	2000001c 	.word	0x2000001c

0800593c <cleanup_stdio>:
 800593c:	6841      	ldr	r1, [r0, #4]
 800593e:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <cleanup_stdio+0x34>)
 8005940:	4299      	cmp	r1, r3
 8005942:	b510      	push	{r4, lr}
 8005944:	4604      	mov	r4, r0
 8005946:	d001      	beq.n	800594c <cleanup_stdio+0x10>
 8005948:	f000 fe86 	bl	8006658 <_fflush_r>
 800594c:	68a1      	ldr	r1, [r4, #8]
 800594e:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <cleanup_stdio+0x38>)
 8005950:	4299      	cmp	r1, r3
 8005952:	d002      	beq.n	800595a <cleanup_stdio+0x1e>
 8005954:	4620      	mov	r0, r4
 8005956:	f000 fe7f 	bl	8006658 <_fflush_r>
 800595a:	68e1      	ldr	r1, [r4, #12]
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <cleanup_stdio+0x3c>)
 800595e:	4299      	cmp	r1, r3
 8005960:	d004      	beq.n	800596c <cleanup_stdio+0x30>
 8005962:	4620      	mov	r0, r4
 8005964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005968:	f000 be76 	b.w	8006658 <_fflush_r>
 800596c:	bd10      	pop	{r4, pc}
 800596e:	bf00      	nop
 8005970:	200007dc 	.word	0x200007dc
 8005974:	20000844 	.word	0x20000844
 8005978:	200008ac 	.word	0x200008ac

0800597c <global_stdio_init.part.0>:
 800597c:	b510      	push	{r4, lr}
 800597e:	4b0b      	ldr	r3, [pc, #44]	@ (80059ac <global_stdio_init.part.0+0x30>)
 8005980:	4c0b      	ldr	r4, [pc, #44]	@ (80059b0 <global_stdio_init.part.0+0x34>)
 8005982:	4a0c      	ldr	r2, [pc, #48]	@ (80059b4 <global_stdio_init.part.0+0x38>)
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	4620      	mov	r0, r4
 8005988:	2200      	movs	r2, #0
 800598a:	2104      	movs	r1, #4
 800598c:	f7ff ff94 	bl	80058b8 <std>
 8005990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005994:	2201      	movs	r2, #1
 8005996:	2109      	movs	r1, #9
 8005998:	f7ff ff8e 	bl	80058b8 <std>
 800599c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059a0:	2202      	movs	r2, #2
 80059a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a6:	2112      	movs	r1, #18
 80059a8:	f7ff bf86 	b.w	80058b8 <std>
 80059ac:	20000914 	.word	0x20000914
 80059b0:	200007dc 	.word	0x200007dc
 80059b4:	08005925 	.word	0x08005925

080059b8 <__sfp_lock_acquire>:
 80059b8:	4801      	ldr	r0, [pc, #4]	@ (80059c0 <__sfp_lock_acquire+0x8>)
 80059ba:	f000 ba00 	b.w	8005dbe <__retarget_lock_acquire_recursive>
 80059be:	bf00      	nop
 80059c0:	2000091d 	.word	0x2000091d

080059c4 <__sfp_lock_release>:
 80059c4:	4801      	ldr	r0, [pc, #4]	@ (80059cc <__sfp_lock_release+0x8>)
 80059c6:	f000 b9fb 	b.w	8005dc0 <__retarget_lock_release_recursive>
 80059ca:	bf00      	nop
 80059cc:	2000091d 	.word	0x2000091d

080059d0 <__sinit>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	4604      	mov	r4, r0
 80059d4:	f7ff fff0 	bl	80059b8 <__sfp_lock_acquire>
 80059d8:	6a23      	ldr	r3, [r4, #32]
 80059da:	b11b      	cbz	r3, 80059e4 <__sinit+0x14>
 80059dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e0:	f7ff bff0 	b.w	80059c4 <__sfp_lock_release>
 80059e4:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <__sinit+0x28>)
 80059e6:	6223      	str	r3, [r4, #32]
 80059e8:	4b04      	ldr	r3, [pc, #16]	@ (80059fc <__sinit+0x2c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f5      	bne.n	80059dc <__sinit+0xc>
 80059f0:	f7ff ffc4 	bl	800597c <global_stdio_init.part.0>
 80059f4:	e7f2      	b.n	80059dc <__sinit+0xc>
 80059f6:	bf00      	nop
 80059f8:	0800593d 	.word	0x0800593d
 80059fc:	20000914 	.word	0x20000914

08005a00 <_fwalk_sglue>:
 8005a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a04:	4607      	mov	r7, r0
 8005a06:	4688      	mov	r8, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a10:	f1b9 0901 	subs.w	r9, r9, #1
 8005a14:	d505      	bpl.n	8005a22 <_fwalk_sglue+0x22>
 8005a16:	6824      	ldr	r4, [r4, #0]
 8005a18:	2c00      	cmp	r4, #0
 8005a1a:	d1f7      	bne.n	8005a0c <_fwalk_sglue+0xc>
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d907      	bls.n	8005a38 <_fwalk_sglue+0x38>
 8005a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	d003      	beq.n	8005a38 <_fwalk_sglue+0x38>
 8005a30:	4629      	mov	r1, r5
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c0      	blx	r8
 8005a36:	4306      	orrs	r6, r0
 8005a38:	3568      	adds	r5, #104	@ 0x68
 8005a3a:	e7e9      	b.n	8005a10 <_fwalk_sglue+0x10>

08005a3c <iprintf>:
 8005a3c:	b40f      	push	{r0, r1, r2, r3}
 8005a3e:	b507      	push	{r0, r1, r2, lr}
 8005a40:	4906      	ldr	r1, [pc, #24]	@ (8005a5c <iprintf+0x20>)
 8005a42:	ab04      	add	r3, sp, #16
 8005a44:	6808      	ldr	r0, [r1, #0]
 8005a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a4a:	6881      	ldr	r1, [r0, #8]
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	f000 fadb 	bl	8006008 <_vfiprintf_r>
 8005a52:	b003      	add	sp, #12
 8005a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a58:	b004      	add	sp, #16
 8005a5a:	4770      	bx	lr
 8005a5c:	20000018 	.word	0x20000018

08005a60 <_puts_r>:
 8005a60:	6a03      	ldr	r3, [r0, #32]
 8005a62:	b570      	push	{r4, r5, r6, lr}
 8005a64:	6884      	ldr	r4, [r0, #8]
 8005a66:	4605      	mov	r5, r0
 8005a68:	460e      	mov	r6, r1
 8005a6a:	b90b      	cbnz	r3, 8005a70 <_puts_r+0x10>
 8005a6c:	f7ff ffb0 	bl	80059d0 <__sinit>
 8005a70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a72:	07db      	lsls	r3, r3, #31
 8005a74:	d405      	bmi.n	8005a82 <_puts_r+0x22>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	0598      	lsls	r0, r3, #22
 8005a7a:	d402      	bmi.n	8005a82 <_puts_r+0x22>
 8005a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a7e:	f000 f99e 	bl	8005dbe <__retarget_lock_acquire_recursive>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	0719      	lsls	r1, r3, #28
 8005a86:	d502      	bpl.n	8005a8e <_puts_r+0x2e>
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d135      	bne.n	8005afa <_puts_r+0x9a>
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4628      	mov	r0, r5
 8005a92:	f000 f8c5 	bl	8005c20 <__swsetup_r>
 8005a96:	b380      	cbz	r0, 8005afa <_puts_r+0x9a>
 8005a98:	f04f 35ff 	mov.w	r5, #4294967295
 8005a9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a9e:	07da      	lsls	r2, r3, #31
 8005aa0:	d405      	bmi.n	8005aae <_puts_r+0x4e>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	059b      	lsls	r3, r3, #22
 8005aa6:	d402      	bmi.n	8005aae <_puts_r+0x4e>
 8005aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aaa:	f000 f989 	bl	8005dc0 <__retarget_lock_release_recursive>
 8005aae:	4628      	mov	r0, r5
 8005ab0:	bd70      	pop	{r4, r5, r6, pc}
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da04      	bge.n	8005ac0 <_puts_r+0x60>
 8005ab6:	69a2      	ldr	r2, [r4, #24]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	dc17      	bgt.n	8005aec <_puts_r+0x8c>
 8005abc:	290a      	cmp	r1, #10
 8005abe:	d015      	beq.n	8005aec <_puts_r+0x8c>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	6022      	str	r2, [r4, #0]
 8005ac6:	7019      	strb	r1, [r3, #0]
 8005ac8:	68a3      	ldr	r3, [r4, #8]
 8005aca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	60a3      	str	r3, [r4, #8]
 8005ad2:	2900      	cmp	r1, #0
 8005ad4:	d1ed      	bne.n	8005ab2 <_puts_r+0x52>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da11      	bge.n	8005afe <_puts_r+0x9e>
 8005ada:	4622      	mov	r2, r4
 8005adc:	210a      	movs	r1, #10
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 f85f 	bl	8005ba2 <__swbuf_r>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d0d7      	beq.n	8005a98 <_puts_r+0x38>
 8005ae8:	250a      	movs	r5, #10
 8005aea:	e7d7      	b.n	8005a9c <_puts_r+0x3c>
 8005aec:	4622      	mov	r2, r4
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 f857 	bl	8005ba2 <__swbuf_r>
 8005af4:	3001      	adds	r0, #1
 8005af6:	d1e7      	bne.n	8005ac8 <_puts_r+0x68>
 8005af8:	e7ce      	b.n	8005a98 <_puts_r+0x38>
 8005afa:	3e01      	subs	r6, #1
 8005afc:	e7e4      	b.n	8005ac8 <_puts_r+0x68>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	6022      	str	r2, [r4, #0]
 8005b04:	220a      	movs	r2, #10
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e7ee      	b.n	8005ae8 <_puts_r+0x88>
	...

08005b0c <puts>:
 8005b0c:	4b02      	ldr	r3, [pc, #8]	@ (8005b18 <puts+0xc>)
 8005b0e:	4601      	mov	r1, r0
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	f7ff bfa5 	b.w	8005a60 <_puts_r>
 8005b16:	bf00      	nop
 8005b18:	20000018 	.word	0x20000018

08005b1c <__sread>:
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	460c      	mov	r4, r1
 8005b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b24:	f000 f8fc 	bl	8005d20 <_read_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	bfab      	itete	ge
 8005b2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b30:	181b      	addge	r3, r3, r0
 8005b32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b36:	bfac      	ite	ge
 8005b38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b3a:	81a3      	strhlt	r3, [r4, #12]
 8005b3c:	bd10      	pop	{r4, pc}

08005b3e <__swrite>:
 8005b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b42:	461f      	mov	r7, r3
 8005b44:	898b      	ldrh	r3, [r1, #12]
 8005b46:	05db      	lsls	r3, r3, #23
 8005b48:	4605      	mov	r5, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	d505      	bpl.n	8005b5c <__swrite+0x1e>
 8005b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b54:	2302      	movs	r3, #2
 8005b56:	2200      	movs	r2, #0
 8005b58:	f000 f8d0 	bl	8005cfc <_lseek_r>
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	4632      	mov	r2, r6
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b72:	f000 b8e7 	b.w	8005d44 <_write_r>

08005b76 <__sseek>:
 8005b76:	b510      	push	{r4, lr}
 8005b78:	460c      	mov	r4, r1
 8005b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b7e:	f000 f8bd 	bl	8005cfc <_lseek_r>
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	bf15      	itete	ne
 8005b88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b92:	81a3      	strheq	r3, [r4, #12]
 8005b94:	bf18      	it	ne
 8005b96:	81a3      	strhne	r3, [r4, #12]
 8005b98:	bd10      	pop	{r4, pc}

08005b9a <__sclose>:
 8005b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9e:	f000 b89d 	b.w	8005cdc <_close_r>

08005ba2 <__swbuf_r>:
 8005ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba4:	460e      	mov	r6, r1
 8005ba6:	4614      	mov	r4, r2
 8005ba8:	4605      	mov	r5, r0
 8005baa:	b118      	cbz	r0, 8005bb4 <__swbuf_r+0x12>
 8005bac:	6a03      	ldr	r3, [r0, #32]
 8005bae:	b90b      	cbnz	r3, 8005bb4 <__swbuf_r+0x12>
 8005bb0:	f7ff ff0e 	bl	80059d0 <__sinit>
 8005bb4:	69a3      	ldr	r3, [r4, #24]
 8005bb6:	60a3      	str	r3, [r4, #8]
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	071a      	lsls	r2, r3, #28
 8005bbc:	d501      	bpl.n	8005bc2 <__swbuf_r+0x20>
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	b943      	cbnz	r3, 8005bd4 <__swbuf_r+0x32>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f82b 	bl	8005c20 <__swsetup_r>
 8005bca:	b118      	cbz	r0, 8005bd4 <__swbuf_r+0x32>
 8005bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	6922      	ldr	r2, [r4, #16]
 8005bd8:	1a98      	subs	r0, r3, r2
 8005bda:	6963      	ldr	r3, [r4, #20]
 8005bdc:	b2f6      	uxtb	r6, r6
 8005bde:	4283      	cmp	r3, r0
 8005be0:	4637      	mov	r7, r6
 8005be2:	dc05      	bgt.n	8005bf0 <__swbuf_r+0x4e>
 8005be4:	4621      	mov	r1, r4
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 fd36 	bl	8006658 <_fflush_r>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d1ed      	bne.n	8005bcc <__swbuf_r+0x2a>
 8005bf0:	68a3      	ldr	r3, [r4, #8]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	60a3      	str	r3, [r4, #8]
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	6022      	str	r2, [r4, #0]
 8005bfc:	701e      	strb	r6, [r3, #0]
 8005bfe:	6962      	ldr	r2, [r4, #20]
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d004      	beq.n	8005c10 <__swbuf_r+0x6e>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	07db      	lsls	r3, r3, #31
 8005c0a:	d5e1      	bpl.n	8005bd0 <__swbuf_r+0x2e>
 8005c0c:	2e0a      	cmp	r6, #10
 8005c0e:	d1df      	bne.n	8005bd0 <__swbuf_r+0x2e>
 8005c10:	4621      	mov	r1, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 fd20 	bl	8006658 <_fflush_r>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d0d9      	beq.n	8005bd0 <__swbuf_r+0x2e>
 8005c1c:	e7d6      	b.n	8005bcc <__swbuf_r+0x2a>
	...

08005c20 <__swsetup_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4b29      	ldr	r3, [pc, #164]	@ (8005cc8 <__swsetup_r+0xa8>)
 8005c24:	4605      	mov	r5, r0
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	460c      	mov	r4, r1
 8005c2a:	b118      	cbz	r0, 8005c34 <__swsetup_r+0x14>
 8005c2c:	6a03      	ldr	r3, [r0, #32]
 8005c2e:	b90b      	cbnz	r3, 8005c34 <__swsetup_r+0x14>
 8005c30:	f7ff fece 	bl	80059d0 <__sinit>
 8005c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c38:	0719      	lsls	r1, r3, #28
 8005c3a:	d422      	bmi.n	8005c82 <__swsetup_r+0x62>
 8005c3c:	06da      	lsls	r2, r3, #27
 8005c3e:	d407      	bmi.n	8005c50 <__swsetup_r+0x30>
 8005c40:	2209      	movs	r2, #9
 8005c42:	602a      	str	r2, [r5, #0]
 8005c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c48:	81a3      	strh	r3, [r4, #12]
 8005c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4e:	e033      	b.n	8005cb8 <__swsetup_r+0x98>
 8005c50:	0758      	lsls	r0, r3, #29
 8005c52:	d512      	bpl.n	8005c7a <__swsetup_r+0x5a>
 8005c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c56:	b141      	cbz	r1, 8005c6a <__swsetup_r+0x4a>
 8005c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	d002      	beq.n	8005c66 <__swsetup_r+0x46>
 8005c60:	4628      	mov	r0, r5
 8005c62:	f000 f8af 	bl	8005dc4 <_free_r>
 8005c66:	2300      	movs	r3, #0
 8005c68:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	f043 0308 	orr.w	r3, r3, #8
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	b94b      	cbnz	r3, 8005c9a <__swsetup_r+0x7a>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c90:	d003      	beq.n	8005c9a <__swsetup_r+0x7a>
 8005c92:	4621      	mov	r1, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 fd2d 	bl	80066f4 <__smakebuf_r>
 8005c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9e:	f013 0201 	ands.w	r2, r3, #1
 8005ca2:	d00a      	beq.n	8005cba <__swsetup_r+0x9a>
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	60a2      	str	r2, [r4, #8]
 8005ca8:	6962      	ldr	r2, [r4, #20]
 8005caa:	4252      	negs	r2, r2
 8005cac:	61a2      	str	r2, [r4, #24]
 8005cae:	6922      	ldr	r2, [r4, #16]
 8005cb0:	b942      	cbnz	r2, 8005cc4 <__swsetup_r+0xa4>
 8005cb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cb6:	d1c5      	bne.n	8005c44 <__swsetup_r+0x24>
 8005cb8:	bd38      	pop	{r3, r4, r5, pc}
 8005cba:	0799      	lsls	r1, r3, #30
 8005cbc:	bf58      	it	pl
 8005cbe:	6962      	ldrpl	r2, [r4, #20]
 8005cc0:	60a2      	str	r2, [r4, #8]
 8005cc2:	e7f4      	b.n	8005cae <__swsetup_r+0x8e>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e7f7      	b.n	8005cb8 <__swsetup_r+0x98>
 8005cc8:	20000018 	.word	0x20000018

08005ccc <memset>:
 8005ccc:	4402      	add	r2, r0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d100      	bne.n	8005cd6 <memset+0xa>
 8005cd4:	4770      	bx	lr
 8005cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cda:	e7f9      	b.n	8005cd0 <memset+0x4>

08005cdc <_close_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d06      	ldr	r5, [pc, #24]	@ (8005cf8 <_close_r+0x1c>)
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	f7fb fc49 	bl	800157e <_close>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_close_r+0x1a>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_close_r+0x1a>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	20000918 	.word	0x20000918

08005cfc <_lseek_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4d07      	ldr	r5, [pc, #28]	@ (8005d1c <_lseek_r+0x20>)
 8005d00:	4604      	mov	r4, r0
 8005d02:	4608      	mov	r0, r1
 8005d04:	4611      	mov	r1, r2
 8005d06:	2200      	movs	r2, #0
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f7fb fc5e 	bl	80015cc <_lseek>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_lseek_r+0x1e>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_lseek_r+0x1e>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20000918 	.word	0x20000918

08005d20 <_read_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4d07      	ldr	r5, [pc, #28]	@ (8005d40 <_read_r+0x20>)
 8005d24:	4604      	mov	r4, r0
 8005d26:	4608      	mov	r0, r1
 8005d28:	4611      	mov	r1, r2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	602a      	str	r2, [r5, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f7fb fc08 	bl	8001544 <_read>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	d102      	bne.n	8005d3e <_read_r+0x1e>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	b103      	cbz	r3, 8005d3e <_read_r+0x1e>
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
 8005d40:	20000918 	.word	0x20000918

08005d44 <_write_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d07      	ldr	r5, [pc, #28]	@ (8005d64 <_write_r+0x20>)
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	602a      	str	r2, [r5, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f7fa fce8 	bl	8000728 <_write>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_write_r+0x1e>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_write_r+0x1e>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20000918 	.word	0x20000918

08005d68 <__errno>:
 8005d68:	4b01      	ldr	r3, [pc, #4]	@ (8005d70 <__errno+0x8>)
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000018 	.word	0x20000018

08005d74 <__libc_init_array>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	4d0d      	ldr	r5, [pc, #52]	@ (8005dac <__libc_init_array+0x38>)
 8005d78:	4c0d      	ldr	r4, [pc, #52]	@ (8005db0 <__libc_init_array+0x3c>)
 8005d7a:	1b64      	subs	r4, r4, r5
 8005d7c:	10a4      	asrs	r4, r4, #2
 8005d7e:	2600      	movs	r6, #0
 8005d80:	42a6      	cmp	r6, r4
 8005d82:	d109      	bne.n	8005d98 <__libc_init_array+0x24>
 8005d84:	4d0b      	ldr	r5, [pc, #44]	@ (8005db4 <__libc_init_array+0x40>)
 8005d86:	4c0c      	ldr	r4, [pc, #48]	@ (8005db8 <__libc_init_array+0x44>)
 8005d88:	f000 fd22 	bl	80067d0 <_init>
 8005d8c:	1b64      	subs	r4, r4, r5
 8005d8e:	10a4      	asrs	r4, r4, #2
 8005d90:	2600      	movs	r6, #0
 8005d92:	42a6      	cmp	r6, r4
 8005d94:	d105      	bne.n	8005da2 <__libc_init_array+0x2e>
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9c:	4798      	blx	r3
 8005d9e:	3601      	adds	r6, #1
 8005da0:	e7ee      	b.n	8005d80 <__libc_init_array+0xc>
 8005da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da6:	4798      	blx	r3
 8005da8:	3601      	adds	r6, #1
 8005daa:	e7f2      	b.n	8005d92 <__libc_init_array+0x1e>
 8005dac:	08006934 	.word	0x08006934
 8005db0:	08006934 	.word	0x08006934
 8005db4:	08006934 	.word	0x08006934
 8005db8:	08006938 	.word	0x08006938

08005dbc <__retarget_lock_init_recursive>:
 8005dbc:	4770      	bx	lr

08005dbe <__retarget_lock_acquire_recursive>:
 8005dbe:	4770      	bx	lr

08005dc0 <__retarget_lock_release_recursive>:
 8005dc0:	4770      	bx	lr
	...

08005dc4 <_free_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	d041      	beq.n	8005e50 <_free_r+0x8c>
 8005dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd0:	1f0c      	subs	r4, r1, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bfb8      	it	lt
 8005dd6:	18e4      	addlt	r4, r4, r3
 8005dd8:	f000 f8e0 	bl	8005f9c <__malloc_lock>
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <_free_r+0x90>)
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	b933      	cbnz	r3, 8005df0 <_free_r+0x2c>
 8005de2:	6063      	str	r3, [r4, #4]
 8005de4:	6014      	str	r4, [r2, #0]
 8005de6:	4628      	mov	r0, r5
 8005de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dec:	f000 b8dc 	b.w	8005fa8 <__malloc_unlock>
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d908      	bls.n	8005e06 <_free_r+0x42>
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	1821      	adds	r1, r4, r0
 8005df8:	428b      	cmp	r3, r1
 8005dfa:	bf01      	itttt	eq
 8005dfc:	6819      	ldreq	r1, [r3, #0]
 8005dfe:	685b      	ldreq	r3, [r3, #4]
 8005e00:	1809      	addeq	r1, r1, r0
 8005e02:	6021      	streq	r1, [r4, #0]
 8005e04:	e7ed      	b.n	8005de2 <_free_r+0x1e>
 8005e06:	461a      	mov	r2, r3
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	b10b      	cbz	r3, 8005e10 <_free_r+0x4c>
 8005e0c:	42a3      	cmp	r3, r4
 8005e0e:	d9fa      	bls.n	8005e06 <_free_r+0x42>
 8005e10:	6811      	ldr	r1, [r2, #0]
 8005e12:	1850      	adds	r0, r2, r1
 8005e14:	42a0      	cmp	r0, r4
 8005e16:	d10b      	bne.n	8005e30 <_free_r+0x6c>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	4401      	add	r1, r0
 8005e1c:	1850      	adds	r0, r2, r1
 8005e1e:	4283      	cmp	r3, r0
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	d1e0      	bne.n	8005de6 <_free_r+0x22>
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	6053      	str	r3, [r2, #4]
 8005e2a:	4408      	add	r0, r1
 8005e2c:	6010      	str	r0, [r2, #0]
 8005e2e:	e7da      	b.n	8005de6 <_free_r+0x22>
 8005e30:	d902      	bls.n	8005e38 <_free_r+0x74>
 8005e32:	230c      	movs	r3, #12
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	e7d6      	b.n	8005de6 <_free_r+0x22>
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	1821      	adds	r1, r4, r0
 8005e3c:	428b      	cmp	r3, r1
 8005e3e:	bf04      	itt	eq
 8005e40:	6819      	ldreq	r1, [r3, #0]
 8005e42:	685b      	ldreq	r3, [r3, #4]
 8005e44:	6063      	str	r3, [r4, #4]
 8005e46:	bf04      	itt	eq
 8005e48:	1809      	addeq	r1, r1, r0
 8005e4a:	6021      	streq	r1, [r4, #0]
 8005e4c:	6054      	str	r4, [r2, #4]
 8005e4e:	e7ca      	b.n	8005de6 <_free_r+0x22>
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
 8005e52:	bf00      	nop
 8005e54:	20000924 	.word	0x20000924

08005e58 <sbrk_aligned>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4e0f      	ldr	r6, [pc, #60]	@ (8005e98 <sbrk_aligned+0x40>)
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	6831      	ldr	r1, [r6, #0]
 8005e60:	4605      	mov	r5, r0
 8005e62:	b911      	cbnz	r1, 8005e6a <sbrk_aligned+0x12>
 8005e64:	f000 fca4 	bl	80067b0 <_sbrk_r>
 8005e68:	6030      	str	r0, [r6, #0]
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 fc9f 	bl	80067b0 <_sbrk_r>
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	d103      	bne.n	8005e7e <sbrk_aligned+0x26>
 8005e76:	f04f 34ff 	mov.w	r4, #4294967295
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
 8005e7e:	1cc4      	adds	r4, r0, #3
 8005e80:	f024 0403 	bic.w	r4, r4, #3
 8005e84:	42a0      	cmp	r0, r4
 8005e86:	d0f8      	beq.n	8005e7a <sbrk_aligned+0x22>
 8005e88:	1a21      	subs	r1, r4, r0
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 fc90 	bl	80067b0 <_sbrk_r>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d1f2      	bne.n	8005e7a <sbrk_aligned+0x22>
 8005e94:	e7ef      	b.n	8005e76 <sbrk_aligned+0x1e>
 8005e96:	bf00      	nop
 8005e98:	20000920 	.word	0x20000920

08005e9c <_malloc_r>:
 8005e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea0:	1ccd      	adds	r5, r1, #3
 8005ea2:	f025 0503 	bic.w	r5, r5, #3
 8005ea6:	3508      	adds	r5, #8
 8005ea8:	2d0c      	cmp	r5, #12
 8005eaa:	bf38      	it	cc
 8005eac:	250c      	movcc	r5, #12
 8005eae:	2d00      	cmp	r5, #0
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	db01      	blt.n	8005eb8 <_malloc_r+0x1c>
 8005eb4:	42a9      	cmp	r1, r5
 8005eb6:	d904      	bls.n	8005ec2 <_malloc_r+0x26>
 8005eb8:	230c      	movs	r3, #12
 8005eba:	6033      	str	r3, [r6, #0]
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f98 <_malloc_r+0xfc>
 8005ec6:	f000 f869 	bl	8005f9c <__malloc_lock>
 8005eca:	f8d8 3000 	ldr.w	r3, [r8]
 8005ece:	461c      	mov	r4, r3
 8005ed0:	bb44      	cbnz	r4, 8005f24 <_malloc_r+0x88>
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	f7ff ffbf 	bl	8005e58 <sbrk_aligned>
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	4604      	mov	r4, r0
 8005ede:	d158      	bne.n	8005f92 <_malloc_r+0xf6>
 8005ee0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ee4:	4627      	mov	r7, r4
 8005ee6:	2f00      	cmp	r7, #0
 8005ee8:	d143      	bne.n	8005f72 <_malloc_r+0xd6>
 8005eea:	2c00      	cmp	r4, #0
 8005eec:	d04b      	beq.n	8005f86 <_malloc_r+0xea>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	eb04 0903 	add.w	r9, r4, r3
 8005ef8:	f000 fc5a 	bl	80067b0 <_sbrk_r>
 8005efc:	4581      	cmp	r9, r0
 8005efe:	d142      	bne.n	8005f86 <_malloc_r+0xea>
 8005f00:	6821      	ldr	r1, [r4, #0]
 8005f02:	1a6d      	subs	r5, r5, r1
 8005f04:	4629      	mov	r1, r5
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff ffa6 	bl	8005e58 <sbrk_aligned>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d03a      	beq.n	8005f86 <_malloc_r+0xea>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	442b      	add	r3, r5
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	f8d8 3000 	ldr.w	r3, [r8]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	bb62      	cbnz	r2, 8005f78 <_malloc_r+0xdc>
 8005f1e:	f8c8 7000 	str.w	r7, [r8]
 8005f22:	e00f      	b.n	8005f44 <_malloc_r+0xa8>
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	1b52      	subs	r2, r2, r5
 8005f28:	d420      	bmi.n	8005f6c <_malloc_r+0xd0>
 8005f2a:	2a0b      	cmp	r2, #11
 8005f2c:	d917      	bls.n	8005f5e <_malloc_r+0xc2>
 8005f2e:	1961      	adds	r1, r4, r5
 8005f30:	42a3      	cmp	r3, r4
 8005f32:	6025      	str	r5, [r4, #0]
 8005f34:	bf18      	it	ne
 8005f36:	6059      	strne	r1, [r3, #4]
 8005f38:	6863      	ldr	r3, [r4, #4]
 8005f3a:	bf08      	it	eq
 8005f3c:	f8c8 1000 	streq.w	r1, [r8]
 8005f40:	5162      	str	r2, [r4, r5]
 8005f42:	604b      	str	r3, [r1, #4]
 8005f44:	4630      	mov	r0, r6
 8005f46:	f000 f82f 	bl	8005fa8 <__malloc_unlock>
 8005f4a:	f104 000b 	add.w	r0, r4, #11
 8005f4e:	1d23      	adds	r3, r4, #4
 8005f50:	f020 0007 	bic.w	r0, r0, #7
 8005f54:	1ac2      	subs	r2, r0, r3
 8005f56:	bf1c      	itt	ne
 8005f58:	1a1b      	subne	r3, r3, r0
 8005f5a:	50a3      	strne	r3, [r4, r2]
 8005f5c:	e7af      	b.n	8005ebe <_malloc_r+0x22>
 8005f5e:	6862      	ldr	r2, [r4, #4]
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	bf0c      	ite	eq
 8005f64:	f8c8 2000 	streq.w	r2, [r8]
 8005f68:	605a      	strne	r2, [r3, #4]
 8005f6a:	e7eb      	b.n	8005f44 <_malloc_r+0xa8>
 8005f6c:	4623      	mov	r3, r4
 8005f6e:	6864      	ldr	r4, [r4, #4]
 8005f70:	e7ae      	b.n	8005ed0 <_malloc_r+0x34>
 8005f72:	463c      	mov	r4, r7
 8005f74:	687f      	ldr	r7, [r7, #4]
 8005f76:	e7b6      	b.n	8005ee6 <_malloc_r+0x4a>
 8005f78:	461a      	mov	r2, r3
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	d1fb      	bne.n	8005f78 <_malloc_r+0xdc>
 8005f80:	2300      	movs	r3, #0
 8005f82:	6053      	str	r3, [r2, #4]
 8005f84:	e7de      	b.n	8005f44 <_malloc_r+0xa8>
 8005f86:	230c      	movs	r3, #12
 8005f88:	6033      	str	r3, [r6, #0]
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f000 f80c 	bl	8005fa8 <__malloc_unlock>
 8005f90:	e794      	b.n	8005ebc <_malloc_r+0x20>
 8005f92:	6005      	str	r5, [r0, #0]
 8005f94:	e7d6      	b.n	8005f44 <_malloc_r+0xa8>
 8005f96:	bf00      	nop
 8005f98:	20000924 	.word	0x20000924

08005f9c <__malloc_lock>:
 8005f9c:	4801      	ldr	r0, [pc, #4]	@ (8005fa4 <__malloc_lock+0x8>)
 8005f9e:	f7ff bf0e 	b.w	8005dbe <__retarget_lock_acquire_recursive>
 8005fa2:	bf00      	nop
 8005fa4:	2000091c 	.word	0x2000091c

08005fa8 <__malloc_unlock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	@ (8005fb0 <__malloc_unlock+0x8>)
 8005faa:	f7ff bf09 	b.w	8005dc0 <__retarget_lock_release_recursive>
 8005fae:	bf00      	nop
 8005fb0:	2000091c 	.word	0x2000091c

08005fb4 <__sfputc_r>:
 8005fb4:	6893      	ldr	r3, [r2, #8]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	b410      	push	{r4}
 8005fbc:	6093      	str	r3, [r2, #8]
 8005fbe:	da08      	bge.n	8005fd2 <__sfputc_r+0x1e>
 8005fc0:	6994      	ldr	r4, [r2, #24]
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	db01      	blt.n	8005fca <__sfputc_r+0x16>
 8005fc6:	290a      	cmp	r1, #10
 8005fc8:	d103      	bne.n	8005fd2 <__sfputc_r+0x1e>
 8005fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fce:	f7ff bde8 	b.w	8005ba2 <__swbuf_r>
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	1c58      	adds	r0, r3, #1
 8005fd6:	6010      	str	r0, [r2, #0]
 8005fd8:	7019      	strb	r1, [r3, #0]
 8005fda:	4608      	mov	r0, r1
 8005fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <__sfputs_r>:
 8005fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	460f      	mov	r7, r1
 8005fe8:	4614      	mov	r4, r2
 8005fea:	18d5      	adds	r5, r2, r3
 8005fec:	42ac      	cmp	r4, r5
 8005fee:	d101      	bne.n	8005ff4 <__sfputs_r+0x12>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	e007      	b.n	8006004 <__sfputs_r+0x22>
 8005ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff8:	463a      	mov	r2, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff ffda 	bl	8005fb4 <__sfputc_r>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d1f3      	bne.n	8005fec <__sfputs_r+0xa>
 8006004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006008 <_vfiprintf_r>:
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	460d      	mov	r5, r1
 800600e:	b09d      	sub	sp, #116	@ 0x74
 8006010:	4614      	mov	r4, r2
 8006012:	4698      	mov	r8, r3
 8006014:	4606      	mov	r6, r0
 8006016:	b118      	cbz	r0, 8006020 <_vfiprintf_r+0x18>
 8006018:	6a03      	ldr	r3, [r0, #32]
 800601a:	b90b      	cbnz	r3, 8006020 <_vfiprintf_r+0x18>
 800601c:	f7ff fcd8 	bl	80059d0 <__sinit>
 8006020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006022:	07d9      	lsls	r1, r3, #31
 8006024:	d405      	bmi.n	8006032 <_vfiprintf_r+0x2a>
 8006026:	89ab      	ldrh	r3, [r5, #12]
 8006028:	059a      	lsls	r2, r3, #22
 800602a:	d402      	bmi.n	8006032 <_vfiprintf_r+0x2a>
 800602c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800602e:	f7ff fec6 	bl	8005dbe <__retarget_lock_acquire_recursive>
 8006032:	89ab      	ldrh	r3, [r5, #12]
 8006034:	071b      	lsls	r3, r3, #28
 8006036:	d501      	bpl.n	800603c <_vfiprintf_r+0x34>
 8006038:	692b      	ldr	r3, [r5, #16]
 800603a:	b99b      	cbnz	r3, 8006064 <_vfiprintf_r+0x5c>
 800603c:	4629      	mov	r1, r5
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff fdee 	bl	8005c20 <__swsetup_r>
 8006044:	b170      	cbz	r0, 8006064 <_vfiprintf_r+0x5c>
 8006046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006048:	07dc      	lsls	r4, r3, #31
 800604a:	d504      	bpl.n	8006056 <_vfiprintf_r+0x4e>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	b01d      	add	sp, #116	@ 0x74
 8006052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006056:	89ab      	ldrh	r3, [r5, #12]
 8006058:	0598      	lsls	r0, r3, #22
 800605a:	d4f7      	bmi.n	800604c <_vfiprintf_r+0x44>
 800605c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800605e:	f7ff feaf 	bl	8005dc0 <__retarget_lock_release_recursive>
 8006062:	e7f3      	b.n	800604c <_vfiprintf_r+0x44>
 8006064:	2300      	movs	r3, #0
 8006066:	9309      	str	r3, [sp, #36]	@ 0x24
 8006068:	2320      	movs	r3, #32
 800606a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800606e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006072:	2330      	movs	r3, #48	@ 0x30
 8006074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006224 <_vfiprintf_r+0x21c>
 8006078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800607c:	f04f 0901 	mov.w	r9, #1
 8006080:	4623      	mov	r3, r4
 8006082:	469a      	mov	sl, r3
 8006084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006088:	b10a      	cbz	r2, 800608e <_vfiprintf_r+0x86>
 800608a:	2a25      	cmp	r2, #37	@ 0x25
 800608c:	d1f9      	bne.n	8006082 <_vfiprintf_r+0x7a>
 800608e:	ebba 0b04 	subs.w	fp, sl, r4
 8006092:	d00b      	beq.n	80060ac <_vfiprintf_r+0xa4>
 8006094:	465b      	mov	r3, fp
 8006096:	4622      	mov	r2, r4
 8006098:	4629      	mov	r1, r5
 800609a:	4630      	mov	r0, r6
 800609c:	f7ff ffa1 	bl	8005fe2 <__sfputs_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	f000 80a7 	beq.w	80061f4 <_vfiprintf_r+0x1ec>
 80060a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060a8:	445a      	add	r2, fp
 80060aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80060ac:	f89a 3000 	ldrb.w	r3, [sl]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 809f 	beq.w	80061f4 <_vfiprintf_r+0x1ec>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060c0:	f10a 0a01 	add.w	sl, sl, #1
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	9307      	str	r3, [sp, #28]
 80060c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80060ce:	4654      	mov	r4, sl
 80060d0:	2205      	movs	r2, #5
 80060d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d6:	4853      	ldr	r0, [pc, #332]	@ (8006224 <_vfiprintf_r+0x21c>)
 80060d8:	f7fa f87a 	bl	80001d0 <memchr>
 80060dc:	9a04      	ldr	r2, [sp, #16]
 80060de:	b9d8      	cbnz	r0, 8006118 <_vfiprintf_r+0x110>
 80060e0:	06d1      	lsls	r1, r2, #27
 80060e2:	bf44      	itt	mi
 80060e4:	2320      	movmi	r3, #32
 80060e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060ea:	0713      	lsls	r3, r2, #28
 80060ec:	bf44      	itt	mi
 80060ee:	232b      	movmi	r3, #43	@ 0x2b
 80060f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060f4:	f89a 3000 	ldrb.w	r3, [sl]
 80060f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060fa:	d015      	beq.n	8006128 <_vfiprintf_r+0x120>
 80060fc:	9a07      	ldr	r2, [sp, #28]
 80060fe:	4654      	mov	r4, sl
 8006100:	2000      	movs	r0, #0
 8006102:	f04f 0c0a 	mov.w	ip, #10
 8006106:	4621      	mov	r1, r4
 8006108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800610c:	3b30      	subs	r3, #48	@ 0x30
 800610e:	2b09      	cmp	r3, #9
 8006110:	d94b      	bls.n	80061aa <_vfiprintf_r+0x1a2>
 8006112:	b1b0      	cbz	r0, 8006142 <_vfiprintf_r+0x13a>
 8006114:	9207      	str	r2, [sp, #28]
 8006116:	e014      	b.n	8006142 <_vfiprintf_r+0x13a>
 8006118:	eba0 0308 	sub.w	r3, r0, r8
 800611c:	fa09 f303 	lsl.w	r3, r9, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	46a2      	mov	sl, r4
 8006126:	e7d2      	b.n	80060ce <_vfiprintf_r+0xc6>
 8006128:	9b03      	ldr	r3, [sp, #12]
 800612a:	1d19      	adds	r1, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	9103      	str	r1, [sp, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	bfbb      	ittet	lt
 8006134:	425b      	neglt	r3, r3
 8006136:	f042 0202 	orrlt.w	r2, r2, #2
 800613a:	9307      	strge	r3, [sp, #28]
 800613c:	9307      	strlt	r3, [sp, #28]
 800613e:	bfb8      	it	lt
 8006140:	9204      	strlt	r2, [sp, #16]
 8006142:	7823      	ldrb	r3, [r4, #0]
 8006144:	2b2e      	cmp	r3, #46	@ 0x2e
 8006146:	d10a      	bne.n	800615e <_vfiprintf_r+0x156>
 8006148:	7863      	ldrb	r3, [r4, #1]
 800614a:	2b2a      	cmp	r3, #42	@ 0x2a
 800614c:	d132      	bne.n	80061b4 <_vfiprintf_r+0x1ac>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	9203      	str	r2, [sp, #12]
 8006156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800615a:	3402      	adds	r4, #2
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006234 <_vfiprintf_r+0x22c>
 8006162:	7821      	ldrb	r1, [r4, #0]
 8006164:	2203      	movs	r2, #3
 8006166:	4650      	mov	r0, sl
 8006168:	f7fa f832 	bl	80001d0 <memchr>
 800616c:	b138      	cbz	r0, 800617e <_vfiprintf_r+0x176>
 800616e:	9b04      	ldr	r3, [sp, #16]
 8006170:	eba0 000a 	sub.w	r0, r0, sl
 8006174:	2240      	movs	r2, #64	@ 0x40
 8006176:	4082      	lsls	r2, r0
 8006178:	4313      	orrs	r3, r2
 800617a:	3401      	adds	r4, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006182:	4829      	ldr	r0, [pc, #164]	@ (8006228 <_vfiprintf_r+0x220>)
 8006184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006188:	2206      	movs	r2, #6
 800618a:	f7fa f821 	bl	80001d0 <memchr>
 800618e:	2800      	cmp	r0, #0
 8006190:	d03f      	beq.n	8006212 <_vfiprintf_r+0x20a>
 8006192:	4b26      	ldr	r3, [pc, #152]	@ (800622c <_vfiprintf_r+0x224>)
 8006194:	bb1b      	cbnz	r3, 80061de <_vfiprintf_r+0x1d6>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	3307      	adds	r3, #7
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	3308      	adds	r3, #8
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a4:	443b      	add	r3, r7
 80061a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80061a8:	e76a      	b.n	8006080 <_vfiprintf_r+0x78>
 80061aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80061ae:	460c      	mov	r4, r1
 80061b0:	2001      	movs	r0, #1
 80061b2:	e7a8      	b.n	8006106 <_vfiprintf_r+0xfe>
 80061b4:	2300      	movs	r3, #0
 80061b6:	3401      	adds	r4, #1
 80061b8:	9305      	str	r3, [sp, #20]
 80061ba:	4619      	mov	r1, r3
 80061bc:	f04f 0c0a 	mov.w	ip, #10
 80061c0:	4620      	mov	r0, r4
 80061c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061c6:	3a30      	subs	r2, #48	@ 0x30
 80061c8:	2a09      	cmp	r2, #9
 80061ca:	d903      	bls.n	80061d4 <_vfiprintf_r+0x1cc>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0c6      	beq.n	800615e <_vfiprintf_r+0x156>
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	e7c4      	b.n	800615e <_vfiprintf_r+0x156>
 80061d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061d8:	4604      	mov	r4, r0
 80061da:	2301      	movs	r3, #1
 80061dc:	e7f0      	b.n	80061c0 <_vfiprintf_r+0x1b8>
 80061de:	ab03      	add	r3, sp, #12
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	462a      	mov	r2, r5
 80061e4:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <_vfiprintf_r+0x228>)
 80061e6:	a904      	add	r1, sp, #16
 80061e8:	4630      	mov	r0, r6
 80061ea:	f3af 8000 	nop.w
 80061ee:	4607      	mov	r7, r0
 80061f0:	1c78      	adds	r0, r7, #1
 80061f2:	d1d6      	bne.n	80061a2 <_vfiprintf_r+0x19a>
 80061f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061f6:	07d9      	lsls	r1, r3, #31
 80061f8:	d405      	bmi.n	8006206 <_vfiprintf_r+0x1fe>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	059a      	lsls	r2, r3, #22
 80061fe:	d402      	bmi.n	8006206 <_vfiprintf_r+0x1fe>
 8006200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006202:	f7ff fddd 	bl	8005dc0 <__retarget_lock_release_recursive>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	065b      	lsls	r3, r3, #25
 800620a:	f53f af1f 	bmi.w	800604c <_vfiprintf_r+0x44>
 800620e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006210:	e71e      	b.n	8006050 <_vfiprintf_r+0x48>
 8006212:	ab03      	add	r3, sp, #12
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	462a      	mov	r2, r5
 8006218:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <_vfiprintf_r+0x228>)
 800621a:	a904      	add	r1, sp, #16
 800621c:	4630      	mov	r0, r6
 800621e:	f000 f879 	bl	8006314 <_printf_i>
 8006222:	e7e4      	b.n	80061ee <_vfiprintf_r+0x1e6>
 8006224:	080068f8 	.word	0x080068f8
 8006228:	08006902 	.word	0x08006902
 800622c:	00000000 	.word	0x00000000
 8006230:	08005fe3 	.word	0x08005fe3
 8006234:	080068fe 	.word	0x080068fe

08006238 <_printf_common>:
 8006238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800623c:	4616      	mov	r6, r2
 800623e:	4698      	mov	r8, r3
 8006240:	688a      	ldr	r2, [r1, #8]
 8006242:	690b      	ldr	r3, [r1, #16]
 8006244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006248:	4293      	cmp	r3, r2
 800624a:	bfb8      	it	lt
 800624c:	4613      	movlt	r3, r2
 800624e:	6033      	str	r3, [r6, #0]
 8006250:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006254:	4607      	mov	r7, r0
 8006256:	460c      	mov	r4, r1
 8006258:	b10a      	cbz	r2, 800625e <_printf_common+0x26>
 800625a:	3301      	adds	r3, #1
 800625c:	6033      	str	r3, [r6, #0]
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	0699      	lsls	r1, r3, #26
 8006262:	bf42      	ittt	mi
 8006264:	6833      	ldrmi	r3, [r6, #0]
 8006266:	3302      	addmi	r3, #2
 8006268:	6033      	strmi	r3, [r6, #0]
 800626a:	6825      	ldr	r5, [r4, #0]
 800626c:	f015 0506 	ands.w	r5, r5, #6
 8006270:	d106      	bne.n	8006280 <_printf_common+0x48>
 8006272:	f104 0a19 	add.w	sl, r4, #25
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	6832      	ldr	r2, [r6, #0]
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	42ab      	cmp	r3, r5
 800627e:	dc26      	bgt.n	80062ce <_printf_common+0x96>
 8006280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	3b00      	subs	r3, #0
 8006288:	bf18      	it	ne
 800628a:	2301      	movne	r3, #1
 800628c:	0692      	lsls	r2, r2, #26
 800628e:	d42b      	bmi.n	80062e8 <_printf_common+0xb0>
 8006290:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006294:	4641      	mov	r1, r8
 8006296:	4638      	mov	r0, r7
 8006298:	47c8      	blx	r9
 800629a:	3001      	adds	r0, #1
 800629c:	d01e      	beq.n	80062dc <_printf_common+0xa4>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	6922      	ldr	r2, [r4, #16]
 80062a2:	f003 0306 	and.w	r3, r3, #6
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	bf02      	ittt	eq
 80062aa:	68e5      	ldreq	r5, [r4, #12]
 80062ac:	6833      	ldreq	r3, [r6, #0]
 80062ae:	1aed      	subeq	r5, r5, r3
 80062b0:	68a3      	ldr	r3, [r4, #8]
 80062b2:	bf0c      	ite	eq
 80062b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b8:	2500      	movne	r5, #0
 80062ba:	4293      	cmp	r3, r2
 80062bc:	bfc4      	itt	gt
 80062be:	1a9b      	subgt	r3, r3, r2
 80062c0:	18ed      	addgt	r5, r5, r3
 80062c2:	2600      	movs	r6, #0
 80062c4:	341a      	adds	r4, #26
 80062c6:	42b5      	cmp	r5, r6
 80062c8:	d11a      	bne.n	8006300 <_printf_common+0xc8>
 80062ca:	2000      	movs	r0, #0
 80062cc:	e008      	b.n	80062e0 <_printf_common+0xa8>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4652      	mov	r2, sl
 80062d2:	4641      	mov	r1, r8
 80062d4:	4638      	mov	r0, r7
 80062d6:	47c8      	blx	r9
 80062d8:	3001      	adds	r0, #1
 80062da:	d103      	bne.n	80062e4 <_printf_common+0xac>
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e4:	3501      	adds	r5, #1
 80062e6:	e7c6      	b.n	8006276 <_printf_common+0x3e>
 80062e8:	18e1      	adds	r1, r4, r3
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	2030      	movs	r0, #48	@ 0x30
 80062ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062f2:	4422      	add	r2, r4
 80062f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062fc:	3302      	adds	r3, #2
 80062fe:	e7c7      	b.n	8006290 <_printf_common+0x58>
 8006300:	2301      	movs	r3, #1
 8006302:	4622      	mov	r2, r4
 8006304:	4641      	mov	r1, r8
 8006306:	4638      	mov	r0, r7
 8006308:	47c8      	blx	r9
 800630a:	3001      	adds	r0, #1
 800630c:	d0e6      	beq.n	80062dc <_printf_common+0xa4>
 800630e:	3601      	adds	r6, #1
 8006310:	e7d9      	b.n	80062c6 <_printf_common+0x8e>
	...

08006314 <_printf_i>:
 8006314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	7e0f      	ldrb	r7, [r1, #24]
 800631a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800631c:	2f78      	cmp	r7, #120	@ 0x78
 800631e:	4691      	mov	r9, r2
 8006320:	4680      	mov	r8, r0
 8006322:	460c      	mov	r4, r1
 8006324:	469a      	mov	sl, r3
 8006326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800632a:	d807      	bhi.n	800633c <_printf_i+0x28>
 800632c:	2f62      	cmp	r7, #98	@ 0x62
 800632e:	d80a      	bhi.n	8006346 <_printf_i+0x32>
 8006330:	2f00      	cmp	r7, #0
 8006332:	f000 80d1 	beq.w	80064d8 <_printf_i+0x1c4>
 8006336:	2f58      	cmp	r7, #88	@ 0x58
 8006338:	f000 80b8 	beq.w	80064ac <_printf_i+0x198>
 800633c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006344:	e03a      	b.n	80063bc <_printf_i+0xa8>
 8006346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800634a:	2b15      	cmp	r3, #21
 800634c:	d8f6      	bhi.n	800633c <_printf_i+0x28>
 800634e:	a101      	add	r1, pc, #4	@ (adr r1, 8006354 <_printf_i+0x40>)
 8006350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006354:	080063ad 	.word	0x080063ad
 8006358:	080063c1 	.word	0x080063c1
 800635c:	0800633d 	.word	0x0800633d
 8006360:	0800633d 	.word	0x0800633d
 8006364:	0800633d 	.word	0x0800633d
 8006368:	0800633d 	.word	0x0800633d
 800636c:	080063c1 	.word	0x080063c1
 8006370:	0800633d 	.word	0x0800633d
 8006374:	0800633d 	.word	0x0800633d
 8006378:	0800633d 	.word	0x0800633d
 800637c:	0800633d 	.word	0x0800633d
 8006380:	080064bf 	.word	0x080064bf
 8006384:	080063eb 	.word	0x080063eb
 8006388:	08006479 	.word	0x08006479
 800638c:	0800633d 	.word	0x0800633d
 8006390:	0800633d 	.word	0x0800633d
 8006394:	080064e1 	.word	0x080064e1
 8006398:	0800633d 	.word	0x0800633d
 800639c:	080063eb 	.word	0x080063eb
 80063a0:	0800633d 	.word	0x0800633d
 80063a4:	0800633d 	.word	0x0800633d
 80063a8:	08006481 	.word	0x08006481
 80063ac:	6833      	ldr	r3, [r6, #0]
 80063ae:	1d1a      	adds	r2, r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6032      	str	r2, [r6, #0]
 80063b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063bc:	2301      	movs	r3, #1
 80063be:	e09c      	b.n	80064fa <_printf_i+0x1e6>
 80063c0:	6833      	ldr	r3, [r6, #0]
 80063c2:	6820      	ldr	r0, [r4, #0]
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	6031      	str	r1, [r6, #0]
 80063c8:	0606      	lsls	r6, r0, #24
 80063ca:	d501      	bpl.n	80063d0 <_printf_i+0xbc>
 80063cc:	681d      	ldr	r5, [r3, #0]
 80063ce:	e003      	b.n	80063d8 <_printf_i+0xc4>
 80063d0:	0645      	lsls	r5, r0, #25
 80063d2:	d5fb      	bpl.n	80063cc <_printf_i+0xb8>
 80063d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063d8:	2d00      	cmp	r5, #0
 80063da:	da03      	bge.n	80063e4 <_printf_i+0xd0>
 80063dc:	232d      	movs	r3, #45	@ 0x2d
 80063de:	426d      	negs	r5, r5
 80063e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e4:	4858      	ldr	r0, [pc, #352]	@ (8006548 <_printf_i+0x234>)
 80063e6:	230a      	movs	r3, #10
 80063e8:	e011      	b.n	800640e <_printf_i+0xfa>
 80063ea:	6821      	ldr	r1, [r4, #0]
 80063ec:	6833      	ldr	r3, [r6, #0]
 80063ee:	0608      	lsls	r0, r1, #24
 80063f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063f4:	d402      	bmi.n	80063fc <_printf_i+0xe8>
 80063f6:	0649      	lsls	r1, r1, #25
 80063f8:	bf48      	it	mi
 80063fa:	b2ad      	uxthmi	r5, r5
 80063fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063fe:	4852      	ldr	r0, [pc, #328]	@ (8006548 <_printf_i+0x234>)
 8006400:	6033      	str	r3, [r6, #0]
 8006402:	bf14      	ite	ne
 8006404:	230a      	movne	r3, #10
 8006406:	2308      	moveq	r3, #8
 8006408:	2100      	movs	r1, #0
 800640a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800640e:	6866      	ldr	r6, [r4, #4]
 8006410:	60a6      	str	r6, [r4, #8]
 8006412:	2e00      	cmp	r6, #0
 8006414:	db05      	blt.n	8006422 <_printf_i+0x10e>
 8006416:	6821      	ldr	r1, [r4, #0]
 8006418:	432e      	orrs	r6, r5
 800641a:	f021 0104 	bic.w	r1, r1, #4
 800641e:	6021      	str	r1, [r4, #0]
 8006420:	d04b      	beq.n	80064ba <_printf_i+0x1a6>
 8006422:	4616      	mov	r6, r2
 8006424:	fbb5 f1f3 	udiv	r1, r5, r3
 8006428:	fb03 5711 	mls	r7, r3, r1, r5
 800642c:	5dc7      	ldrb	r7, [r0, r7]
 800642e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006432:	462f      	mov	r7, r5
 8006434:	42bb      	cmp	r3, r7
 8006436:	460d      	mov	r5, r1
 8006438:	d9f4      	bls.n	8006424 <_printf_i+0x110>
 800643a:	2b08      	cmp	r3, #8
 800643c:	d10b      	bne.n	8006456 <_printf_i+0x142>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	07df      	lsls	r7, r3, #31
 8006442:	d508      	bpl.n	8006456 <_printf_i+0x142>
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	6861      	ldr	r1, [r4, #4]
 8006448:	4299      	cmp	r1, r3
 800644a:	bfde      	ittt	le
 800644c:	2330      	movle	r3, #48	@ 0x30
 800644e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006452:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006456:	1b92      	subs	r2, r2, r6
 8006458:	6122      	str	r2, [r4, #16]
 800645a:	f8cd a000 	str.w	sl, [sp]
 800645e:	464b      	mov	r3, r9
 8006460:	aa03      	add	r2, sp, #12
 8006462:	4621      	mov	r1, r4
 8006464:	4640      	mov	r0, r8
 8006466:	f7ff fee7 	bl	8006238 <_printf_common>
 800646a:	3001      	adds	r0, #1
 800646c:	d14a      	bne.n	8006504 <_printf_i+0x1f0>
 800646e:	f04f 30ff 	mov.w	r0, #4294967295
 8006472:	b004      	add	sp, #16
 8006474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	f043 0320 	orr.w	r3, r3, #32
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	4832      	ldr	r0, [pc, #200]	@ (800654c <_printf_i+0x238>)
 8006482:	2778      	movs	r7, #120	@ 0x78
 8006484:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	6831      	ldr	r1, [r6, #0]
 800648c:	061f      	lsls	r7, r3, #24
 800648e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006492:	d402      	bmi.n	800649a <_printf_i+0x186>
 8006494:	065f      	lsls	r7, r3, #25
 8006496:	bf48      	it	mi
 8006498:	b2ad      	uxthmi	r5, r5
 800649a:	6031      	str	r1, [r6, #0]
 800649c:	07d9      	lsls	r1, r3, #31
 800649e:	bf44      	itt	mi
 80064a0:	f043 0320 	orrmi.w	r3, r3, #32
 80064a4:	6023      	strmi	r3, [r4, #0]
 80064a6:	b11d      	cbz	r5, 80064b0 <_printf_i+0x19c>
 80064a8:	2310      	movs	r3, #16
 80064aa:	e7ad      	b.n	8006408 <_printf_i+0xf4>
 80064ac:	4826      	ldr	r0, [pc, #152]	@ (8006548 <_printf_i+0x234>)
 80064ae:	e7e9      	b.n	8006484 <_printf_i+0x170>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	f023 0320 	bic.w	r3, r3, #32
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	e7f6      	b.n	80064a8 <_printf_i+0x194>
 80064ba:	4616      	mov	r6, r2
 80064bc:	e7bd      	b.n	800643a <_printf_i+0x126>
 80064be:	6833      	ldr	r3, [r6, #0]
 80064c0:	6825      	ldr	r5, [r4, #0]
 80064c2:	6961      	ldr	r1, [r4, #20]
 80064c4:	1d18      	adds	r0, r3, #4
 80064c6:	6030      	str	r0, [r6, #0]
 80064c8:	062e      	lsls	r6, r5, #24
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	d501      	bpl.n	80064d2 <_printf_i+0x1be>
 80064ce:	6019      	str	r1, [r3, #0]
 80064d0:	e002      	b.n	80064d8 <_printf_i+0x1c4>
 80064d2:	0668      	lsls	r0, r5, #25
 80064d4:	d5fb      	bpl.n	80064ce <_printf_i+0x1ba>
 80064d6:	8019      	strh	r1, [r3, #0]
 80064d8:	2300      	movs	r3, #0
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	4616      	mov	r6, r2
 80064de:	e7bc      	b.n	800645a <_printf_i+0x146>
 80064e0:	6833      	ldr	r3, [r6, #0]
 80064e2:	1d1a      	adds	r2, r3, #4
 80064e4:	6032      	str	r2, [r6, #0]
 80064e6:	681e      	ldr	r6, [r3, #0]
 80064e8:	6862      	ldr	r2, [r4, #4]
 80064ea:	2100      	movs	r1, #0
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7f9 fe6f 	bl	80001d0 <memchr>
 80064f2:	b108      	cbz	r0, 80064f8 <_printf_i+0x1e4>
 80064f4:	1b80      	subs	r0, r0, r6
 80064f6:	6060      	str	r0, [r4, #4]
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	2300      	movs	r3, #0
 80064fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006502:	e7aa      	b.n	800645a <_printf_i+0x146>
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	4632      	mov	r2, r6
 8006508:	4649      	mov	r1, r9
 800650a:	4640      	mov	r0, r8
 800650c:	47d0      	blx	sl
 800650e:	3001      	adds	r0, #1
 8006510:	d0ad      	beq.n	800646e <_printf_i+0x15a>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	079b      	lsls	r3, r3, #30
 8006516:	d413      	bmi.n	8006540 <_printf_i+0x22c>
 8006518:	68e0      	ldr	r0, [r4, #12]
 800651a:	9b03      	ldr	r3, [sp, #12]
 800651c:	4298      	cmp	r0, r3
 800651e:	bfb8      	it	lt
 8006520:	4618      	movlt	r0, r3
 8006522:	e7a6      	b.n	8006472 <_printf_i+0x15e>
 8006524:	2301      	movs	r3, #1
 8006526:	4632      	mov	r2, r6
 8006528:	4649      	mov	r1, r9
 800652a:	4640      	mov	r0, r8
 800652c:	47d0      	blx	sl
 800652e:	3001      	adds	r0, #1
 8006530:	d09d      	beq.n	800646e <_printf_i+0x15a>
 8006532:	3501      	adds	r5, #1
 8006534:	68e3      	ldr	r3, [r4, #12]
 8006536:	9903      	ldr	r1, [sp, #12]
 8006538:	1a5b      	subs	r3, r3, r1
 800653a:	42ab      	cmp	r3, r5
 800653c:	dcf2      	bgt.n	8006524 <_printf_i+0x210>
 800653e:	e7eb      	b.n	8006518 <_printf_i+0x204>
 8006540:	2500      	movs	r5, #0
 8006542:	f104 0619 	add.w	r6, r4, #25
 8006546:	e7f5      	b.n	8006534 <_printf_i+0x220>
 8006548:	08006909 	.word	0x08006909
 800654c:	0800691a 	.word	0x0800691a

08006550 <__sflush_r>:
 8006550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006558:	0716      	lsls	r6, r2, #28
 800655a:	4605      	mov	r5, r0
 800655c:	460c      	mov	r4, r1
 800655e:	d454      	bmi.n	800660a <__sflush_r+0xba>
 8006560:	684b      	ldr	r3, [r1, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	dc02      	bgt.n	800656c <__sflush_r+0x1c>
 8006566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	dd48      	ble.n	80065fe <__sflush_r+0xae>
 800656c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800656e:	2e00      	cmp	r6, #0
 8006570:	d045      	beq.n	80065fe <__sflush_r+0xae>
 8006572:	2300      	movs	r3, #0
 8006574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006578:	682f      	ldr	r7, [r5, #0]
 800657a:	6a21      	ldr	r1, [r4, #32]
 800657c:	602b      	str	r3, [r5, #0]
 800657e:	d030      	beq.n	80065e2 <__sflush_r+0x92>
 8006580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	0759      	lsls	r1, r3, #29
 8006586:	d505      	bpl.n	8006594 <__sflush_r+0x44>
 8006588:	6863      	ldr	r3, [r4, #4]
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800658e:	b10b      	cbz	r3, 8006594 <__sflush_r+0x44>
 8006590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	2300      	movs	r3, #0
 8006596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006598:	6a21      	ldr	r1, [r4, #32]
 800659a:	4628      	mov	r0, r5
 800659c:	47b0      	blx	r6
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	d106      	bne.n	80065b2 <__sflush_r+0x62>
 80065a4:	6829      	ldr	r1, [r5, #0]
 80065a6:	291d      	cmp	r1, #29
 80065a8:	d82b      	bhi.n	8006602 <__sflush_r+0xb2>
 80065aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006654 <__sflush_r+0x104>)
 80065ac:	40ca      	lsrs	r2, r1
 80065ae:	07d6      	lsls	r6, r2, #31
 80065b0:	d527      	bpl.n	8006602 <__sflush_r+0xb2>
 80065b2:	2200      	movs	r2, #0
 80065b4:	6062      	str	r2, [r4, #4]
 80065b6:	04d9      	lsls	r1, r3, #19
 80065b8:	6922      	ldr	r2, [r4, #16]
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	d504      	bpl.n	80065c8 <__sflush_r+0x78>
 80065be:	1c42      	adds	r2, r0, #1
 80065c0:	d101      	bne.n	80065c6 <__sflush_r+0x76>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	b903      	cbnz	r3, 80065c8 <__sflush_r+0x78>
 80065c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80065c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065ca:	602f      	str	r7, [r5, #0]
 80065cc:	b1b9      	cbz	r1, 80065fe <__sflush_r+0xae>
 80065ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065d2:	4299      	cmp	r1, r3
 80065d4:	d002      	beq.n	80065dc <__sflush_r+0x8c>
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7ff fbf4 	bl	8005dc4 <_free_r>
 80065dc:	2300      	movs	r3, #0
 80065de:	6363      	str	r3, [r4, #52]	@ 0x34
 80065e0:	e00d      	b.n	80065fe <__sflush_r+0xae>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b0      	blx	r6
 80065e8:	4602      	mov	r2, r0
 80065ea:	1c50      	adds	r0, r2, #1
 80065ec:	d1c9      	bne.n	8006582 <__sflush_r+0x32>
 80065ee:	682b      	ldr	r3, [r5, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0c6      	beq.n	8006582 <__sflush_r+0x32>
 80065f4:	2b1d      	cmp	r3, #29
 80065f6:	d001      	beq.n	80065fc <__sflush_r+0xac>
 80065f8:	2b16      	cmp	r3, #22
 80065fa:	d11e      	bne.n	800663a <__sflush_r+0xea>
 80065fc:	602f      	str	r7, [r5, #0]
 80065fe:	2000      	movs	r0, #0
 8006600:	e022      	b.n	8006648 <__sflush_r+0xf8>
 8006602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006606:	b21b      	sxth	r3, r3
 8006608:	e01b      	b.n	8006642 <__sflush_r+0xf2>
 800660a:	690f      	ldr	r7, [r1, #16]
 800660c:	2f00      	cmp	r7, #0
 800660e:	d0f6      	beq.n	80065fe <__sflush_r+0xae>
 8006610:	0793      	lsls	r3, r2, #30
 8006612:	680e      	ldr	r6, [r1, #0]
 8006614:	bf08      	it	eq
 8006616:	694b      	ldreq	r3, [r1, #20]
 8006618:	600f      	str	r7, [r1, #0]
 800661a:	bf18      	it	ne
 800661c:	2300      	movne	r3, #0
 800661e:	eba6 0807 	sub.w	r8, r6, r7
 8006622:	608b      	str	r3, [r1, #8]
 8006624:	f1b8 0f00 	cmp.w	r8, #0
 8006628:	dde9      	ble.n	80065fe <__sflush_r+0xae>
 800662a:	6a21      	ldr	r1, [r4, #32]
 800662c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800662e:	4643      	mov	r3, r8
 8006630:	463a      	mov	r2, r7
 8006632:	4628      	mov	r0, r5
 8006634:	47b0      	blx	r6
 8006636:	2800      	cmp	r0, #0
 8006638:	dc08      	bgt.n	800664c <__sflush_r+0xfc>
 800663a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800663e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800664c:	4407      	add	r7, r0
 800664e:	eba8 0800 	sub.w	r8, r8, r0
 8006652:	e7e7      	b.n	8006624 <__sflush_r+0xd4>
 8006654:	20400001 	.word	0x20400001

08006658 <_fflush_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	690b      	ldr	r3, [r1, #16]
 800665c:	4605      	mov	r5, r0
 800665e:	460c      	mov	r4, r1
 8006660:	b913      	cbnz	r3, 8006668 <_fflush_r+0x10>
 8006662:	2500      	movs	r5, #0
 8006664:	4628      	mov	r0, r5
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	b118      	cbz	r0, 8006672 <_fflush_r+0x1a>
 800666a:	6a03      	ldr	r3, [r0, #32]
 800666c:	b90b      	cbnz	r3, 8006672 <_fflush_r+0x1a>
 800666e:	f7ff f9af 	bl	80059d0 <__sinit>
 8006672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f3      	beq.n	8006662 <_fflush_r+0xa>
 800667a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800667c:	07d0      	lsls	r0, r2, #31
 800667e:	d404      	bmi.n	800668a <_fflush_r+0x32>
 8006680:	0599      	lsls	r1, r3, #22
 8006682:	d402      	bmi.n	800668a <_fflush_r+0x32>
 8006684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006686:	f7ff fb9a 	bl	8005dbe <__retarget_lock_acquire_recursive>
 800668a:	4628      	mov	r0, r5
 800668c:	4621      	mov	r1, r4
 800668e:	f7ff ff5f 	bl	8006550 <__sflush_r>
 8006692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006694:	07da      	lsls	r2, r3, #31
 8006696:	4605      	mov	r5, r0
 8006698:	d4e4      	bmi.n	8006664 <_fflush_r+0xc>
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	059b      	lsls	r3, r3, #22
 800669e:	d4e1      	bmi.n	8006664 <_fflush_r+0xc>
 80066a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066a2:	f7ff fb8d 	bl	8005dc0 <__retarget_lock_release_recursive>
 80066a6:	e7dd      	b.n	8006664 <_fflush_r+0xc>

080066a8 <__swhatbuf_r>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	460c      	mov	r4, r1
 80066ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b0:	2900      	cmp	r1, #0
 80066b2:	b096      	sub	sp, #88	@ 0x58
 80066b4:	4615      	mov	r5, r2
 80066b6:	461e      	mov	r6, r3
 80066b8:	da0d      	bge.n	80066d6 <__swhatbuf_r+0x2e>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	bf14      	ite	ne
 80066c6:	2340      	movne	r3, #64	@ 0x40
 80066c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066cc:	2000      	movs	r0, #0
 80066ce:	6031      	str	r1, [r6, #0]
 80066d0:	602b      	str	r3, [r5, #0]
 80066d2:	b016      	add	sp, #88	@ 0x58
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	466a      	mov	r2, sp
 80066d8:	f000 f848 	bl	800676c <_fstat_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	dbec      	blt.n	80066ba <__swhatbuf_r+0x12>
 80066e0:	9901      	ldr	r1, [sp, #4]
 80066e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066ea:	4259      	negs	r1, r3
 80066ec:	4159      	adcs	r1, r3
 80066ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066f2:	e7eb      	b.n	80066cc <__swhatbuf_r+0x24>

080066f4 <__smakebuf_r>:
 80066f4:	898b      	ldrh	r3, [r1, #12]
 80066f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066f8:	079d      	lsls	r5, r3, #30
 80066fa:	4606      	mov	r6, r0
 80066fc:	460c      	mov	r4, r1
 80066fe:	d507      	bpl.n	8006710 <__smakebuf_r+0x1c>
 8006700:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	2301      	movs	r3, #1
 800670a:	6163      	str	r3, [r4, #20]
 800670c:	b003      	add	sp, #12
 800670e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006710:	ab01      	add	r3, sp, #4
 8006712:	466a      	mov	r2, sp
 8006714:	f7ff ffc8 	bl	80066a8 <__swhatbuf_r>
 8006718:	9f00      	ldr	r7, [sp, #0]
 800671a:	4605      	mov	r5, r0
 800671c:	4639      	mov	r1, r7
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff fbbc 	bl	8005e9c <_malloc_r>
 8006724:	b948      	cbnz	r0, 800673a <__smakebuf_r+0x46>
 8006726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672a:	059a      	lsls	r2, r3, #22
 800672c:	d4ee      	bmi.n	800670c <__smakebuf_r+0x18>
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	f043 0302 	orr.w	r3, r3, #2
 8006736:	81a3      	strh	r3, [r4, #12]
 8006738:	e7e2      	b.n	8006700 <__smakebuf_r+0xc>
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	6020      	str	r0, [r4, #0]
 800673e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	9b01      	ldr	r3, [sp, #4]
 8006746:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800674a:	b15b      	cbz	r3, 8006764 <__smakebuf_r+0x70>
 800674c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006750:	4630      	mov	r0, r6
 8006752:	f000 f81d 	bl	8006790 <_isatty_r>
 8006756:	b128      	cbz	r0, 8006764 <__smakebuf_r+0x70>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	431d      	orrs	r5, r3
 8006768:	81a5      	strh	r5, [r4, #12]
 800676a:	e7cf      	b.n	800670c <__smakebuf_r+0x18>

0800676c <_fstat_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4d07      	ldr	r5, [pc, #28]	@ (800678c <_fstat_r+0x20>)
 8006770:	2300      	movs	r3, #0
 8006772:	4604      	mov	r4, r0
 8006774:	4608      	mov	r0, r1
 8006776:	4611      	mov	r1, r2
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	f7fa ff0c 	bl	8001596 <_fstat>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	d102      	bne.n	8006788 <_fstat_r+0x1c>
 8006782:	682b      	ldr	r3, [r5, #0]
 8006784:	b103      	cbz	r3, 8006788 <_fstat_r+0x1c>
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	bd38      	pop	{r3, r4, r5, pc}
 800678a:	bf00      	nop
 800678c:	20000918 	.word	0x20000918

08006790 <_isatty_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d06      	ldr	r5, [pc, #24]	@ (80067ac <_isatty_r+0x1c>)
 8006794:	2300      	movs	r3, #0
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	602b      	str	r3, [r5, #0]
 800679c:	f7fa ff0b 	bl	80015b6 <_isatty>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d102      	bne.n	80067aa <_isatty_r+0x1a>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	b103      	cbz	r3, 80067aa <_isatty_r+0x1a>
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	20000918 	.word	0x20000918

080067b0 <_sbrk_r>:
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4d06      	ldr	r5, [pc, #24]	@ (80067cc <_sbrk_r+0x1c>)
 80067b4:	2300      	movs	r3, #0
 80067b6:	4604      	mov	r4, r0
 80067b8:	4608      	mov	r0, r1
 80067ba:	602b      	str	r3, [r5, #0]
 80067bc:	f7fa ff14 	bl	80015e8 <_sbrk>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_sbrk_r+0x1a>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_sbrk_r+0x1a>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20000918 	.word	0x20000918

080067d0 <_init>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	bf00      	nop
 80067d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d6:	bc08      	pop	{r3}
 80067d8:	469e      	mov	lr, r3
 80067da:	4770      	bx	lr

080067dc <_fini>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr
